{"cells":[{"cell_type":"markdown","metadata":{"id":"HRTP3JGFg2-5"},"source":["# Seminararbeit: Distributional Random Forest\n"]},{"cell_type":"markdown","metadata":{"id":"KXGAFgfXhz5W"},"source":["#Packages\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8e7zaulSe33K"},"outputs":[],"source":["!pip install ddop2 seaborn==0.11.0 matplotlib\n","!pip install -i https://test.pypi.org/simple/ drf==0.1\n","!R -e \"install.packages('drf', repos='https://cran.rstudio.com/')\"\n","\n","from matplotlib import pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from scipy.stats import norm\n","from ddop2.datasets import load_yaz\n","from sklearn.ensemble import RandomForestRegressor\n","from ddop2.metrics import average_costs\n","from sklearn.model_selection import GridSearchCV\n","from ddop2.newsvendor import DecisionTreeWeightedNewsvendor, KNeighborsWeightedNewsvendor, SampleAverageApproximationNewsvendor, KNeighborsWeightedNewsvendor, DeepLearningNewsvendor, RandomForestWeightedNewsvendor\n","from sklearn.model_selection import GridSearchCV\n","import random\n","from rpy2.rinterface import RRuntimeWarning\n","from drf import drf\n"]},{"cell_type":"code","source":["import warnings\n","\n","# Ausschalten von FutureWarnings\n","warnings.simplefilter(action='ignore', category=FutureWarning)"],"metadata":{"id":"JuG82TEE9sjq"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lyoMKvwNh8p8"},"outputs":[],"source":["path_YAZ= \"https://drive.google.com/uc?id=1vvls5XVUJX_s7pKpb6notxgfItZu7MHz\"\n","path_bakery = \"https://drive.google.com/uc?id=1TuGKXrmAX0vJ-axzJXbIuhzp1-FC4m83\"\n","path_SID = \"https://drive.google.com/uc?id=1ZJGyI4OgTiPzo1ZMWhAIDjYSn0V590O9\"\n","path_M5 = \"https://drive.google.com/uc?id=1LaGATL59DYo5TkPciQZF_1UpUHIMSjTI\"\n","\n","YAZ = pd.read_csv(path_YAZ)\n","Bakery = pd.read_csv(path_bakery)\n","SID = pd.read_csv(path_SID)\n","M5 = pd.read_csv(path_M5)"]},{"cell_type":"markdown","metadata":{"id":"O_dGQlTiW_gj"},"source":["# Entscheidungsbaum für Grundlagen Teil"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"juoWxBb8XhGT"},"outputs":[],"source":["from sklearn.tree import DecisionTreeRegressor\n","\n","yaz = load_yaz()\n","y = yaz.target[\"steak\"]\n","X = yaz.data\n","X = pd.get_dummies(X, columns=[\"weekday\",\"month\",\"year\"]) #\n","df = pd.concat([X, y], axis=1)\n","df = df[[\"rain\",\"temperature\",\"steak\"]]\n","df = df.head(20)\n","\n","#Aufteilung Ziel und Entscheidungsvariabel\n","X = df[[\"rain\",\"temperature\"]]\n","y = df[\"steak\"]\n","\n","#Regressor\n","model = DecisionTreeRegressor(random_state=42, max_depth=2)\n","model.fit(X,y)\n","predictions = model.predict(X)\n","\n","#Baum zeichnen\n","from sklearn.tree import plot_tree\n","plt.figure(figsize=(12,8), dpi=100)\n","plot_tree(model, feature_names=X.columns,impurity=False, rounded=True, fontsize=18);\n","plt.show()\n","\n","df1 = df[(df[\"rain\"] <= 0.35) & (df[\"temperature\"] <= 17.3)]\n","df2 = df[(df[\"rain\"] > 0.35) & (df[\"temperature\"] <= 17.3)]\n","df3 = df[df[\"temperature\"] > 17.3]\n","df4 = df[df[\"temperature\"] > 18.6]\n","\n","\n"]},{"cell_type":"markdown","source":["#YAZ"],"metadata":{"id":"p26QsrgofPJK"}},{"cell_type":"code","source":["#y target Werte als Instanz je Spalte\n","\n","data = YAZ\n","df = pd.DataFrame(data)\n","\n","y = df.pivot_table(index=['dayIndex', 'label'], columns='id', values='demand').reset_index().set_index('dayIndex')\n","y_train = y[y['label'] == 'train'].drop(columns=['label'])\n","y_test = y[y['label'] == 'test'].drop(columns=['label'])\n"],"metadata":{"id":"kyaurEBU4m8m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# X Features jeweils für alle Instanzen\n","\n","X_train_features = YAZ[YAZ['label'] == 'train'].groupby('id')\n","X_test_features = YAZ[YAZ['label'] == 'test'].groupby('id')\n","\n","calendric_features = [\"weekend\", \"weekday_FRI\", \"weekday_MON\", \"weekday_SAT\", \"weekday_SUN\", \"weekday_THU\", \"weekday_TUE\", \"weekday_WED\",\n","    \"month_APR\", \"month_AUG\", \"month_DEC\", \"month_FEB\", \"month_JAN\", \"month_JUL\", \"month_JUN\", \"month_MAR\", \"month_MAY\",\n","    \"month_NOV\", \"month_OCT\", \"month_SEP\", \"year_2013\", \"year_2014\", \"year_2015\"]\n","\n","lag_features = [\"demand__sum_values_7\", \"demand__median_7\", \"demand__mean_7\", \"demand__standard_deviation_7\", \"demand__variance_7\", \"demand__root_mean_square_7\", \"demand__maximum_7\", \"demand__absolute_maximum_7\", \"demand__minimum_7\", \"demand__sum_values_14\", \"demand__median_14\", \"demand__mean_14\", \"demand__standard_deviation_14\", \"demand__variance_14\", \"demand__root_mean_square_14\", \"demand__maximum_14\", \"demand__absolute_maximum_14\", \"demand__minimum_14\", \"demand__sum_values_28\", \"demand__median_28\", \"demand__mean_28\", \"demand__standard_deviation_28\", \"demand__variance_28\", \"demand__root_mean_square_28\", \"demand__maximum_28\", \"demand__absolute_maximum_28\", \"demand__minimum_28\"]\n","special_features = [\"is_closed\",\"is_holiday\", \"wind\", \"clouds\", \"rain\", \"sunshine\"]\n","\n","\n","calendric_features = calendric_features                                                   # calendric\n","calendric_lag_features = calendric_features + lag_features                                # calendric und lag\n","calendric_lag_special_features = calendric_features + lag_features + special_features     # calendric lag und special\n","\n","### Formel um jeweiligen Features für target und Featureauswahl auszugeben\n","features = X_train_features.get_group(\"fish\")[calendric_features]\n","#print(features)\n"],"metadata":{"id":"p20dddRu7Epg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Service Level und Feature variation"],"metadata":{"id":"oCWQqVOcUZle"}},{"cell_type":"code","source":["random.seed(0)\n","\n","#param Grids für DRF\n","param_combinations = [\n","    {'min_node_size': 10, 'num_trees': 50},\n","    {'min_node_size': 10, 'num_trees': 100},\n","    {'min_node_size': 10, 'num_trees': 250},\n","    {'min_node_size': 10, 'num_trees': 500},\n","    {'min_node_size': 10, 'num_trees': 1000},\n","    {'min_node_size': 15, 'num_trees': 50},\n","    {'min_node_size': 15, 'num_trees': 100},\n","    {'min_node_size': 15, 'num_trees': 250},\n","    {'min_node_size': 15, 'num_trees': 500},\n","    {'min_node_size': 15, 'num_trees': 1000},\n","    {'min_node_size': 25, 'num_trees': 50},\n","    {'min_node_size': 25, 'num_trees': 100},\n","    {'min_node_size': 25, 'num_trees': 250},\n","    {'min_node_size': 25, 'num_trees': 500},\n","    {'min_node_size': 25, 'num_trees': 1000},\n","    {'min_node_size': 50, 'num_trees': 50},\n","    {'min_node_size': 50, 'num_trees': 100},\n","    {'min_node_size': 50, 'num_trees': 250},\n","    {'min_node_size': 50, 'num_trees': 500},\n","    {'min_node_size': 50, 'num_trees': 1000},\n","]\n","\n","# feature variation\n","feature_names = ['Calendric', 'calendric_lag_special']\n","\n","# inverse scaling\n","scaling_value_group = data.groupby('id', as_index=False)['scalingValue'].first()\n","\n","# Service Levels mit cu, co\n","combinations = [(9, 1), (7.5, 2.5), (5, 5), (2.5, 7.5), (1, 9)]\n","\n","\n","table_rows = []\n","best_params_per_variable = {}\n","table_data_drf = []\n","\n","\n","\n","# Schleife über alle Service Level\n","for cu, co in combinations:\n","    print(f\"Testing cu = {cu}, co = {co}\")\n","\n","    # Schleife für Szenario 3 : Feature Variation auf SL 0,9\n","    if cu == 9 and co == 1:\n","\n","        for column in y_train.columns: # Schleife über alle Produt/Shop Instanzen\n","            print(f\"Working on column: {column}\")\n","\n","            #scaling factor je target\n","            scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","            # target auswahl\n","            X_train_cal = X_train_features.get_group(column)[calendric_features]\n","            X_train_cal_lag_spec = X_train_features.get_group(column)[calendric_lag_special_features]\n","            X_test_cal = X_test_features.get_group(column)[calendric_features]\n","            X_test_cal_lag_spec = X_test_features.get_group(column)[calendric_lag_special_features]\n","\n","            X_variation_pairs = [(X_train_cal, X_test_cal), (X_train_cal_lag_spec, X_test_cal_lag_spec)]\n","\n","            # Schleife über beide Feature Variationen  in Scenario 3\n","            for i,  (X_train, X_test) in enumerate(X_variation_pairs):\n","\n","                feature_name = feature_names[i]  # Name des aktuellen Feature-Satzes\n","                print(f\"Testing cu = {cu}, co = {co}, Feature Name = {feature_name}\")\n","\n","                # SAA\n","                saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test.shape[0])\n","                costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","                # Random Forest Grid Search und Kosten\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","                    'n_estimators': [10, 20, 50, 100]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_RF = grid_search.best_params_\n","\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","                rfw_model.fit(X_train, y_train[column])\n","                rfw_predictions = rfw_model.predict(X_test)\n","                rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","                # kNNW\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","                param_grid = {\n","                    'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","                }\n","\n","                grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_kNNW = grid_search.best_params_\n","\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","                kNNW_model.fit(X_train, y_train[column])\n","                knWW_predict = kNNW_model.predict(X_test)\n","                kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","                # Weighted DT\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_DTW = grid_search.best_params_\n","\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","                DTW_model.fit(X_train, y_train[column])\n","                DTW_prediction = DTW_model.predict(X_test)\n","                DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","                #drf Paramterbestimmung\n","\n","                best_average_costs = float('inf')\n","                best_params_drf = None\n","\n","                # Schleife über alle Parameterkombinationen\n","                for param_combination in param_combinations:\n","                    min_node_size = param_combination['min_node_size']\n","                    num_trees = param_combination['num_trees']\n","\n","                    # Trainieren des Modells mit den aktuellen Parametern\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]\n","                    DRF.fit(X_train, target)\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    # Schleife über alle Testpunkte je Istanz\n","                    for i in range(len(y_test)):\n","                        quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                        quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                        prediction = quantil_90[i]\n","\n","                        nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                        # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage > prediction:\n","                            unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                        else:\n","                            unterdeckungskosten = 0\n","\n","                        # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage < prediction:\n","                            überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                        else:\n","                            überdeckungskosten = 0\n","\n","                        # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                        gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                        gesamtkosten_summe += gesamtkosten\n","\n","\n","                    # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","                    durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","                    # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren die besten Kosten und Parameter\n","                    if durchschnittskosten_variable < best_average_costs:\n","                        best_average_costs = durchschnittskosten_variable\n","                        best_params_drf = param_combination\n","\n","                table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","                best_params_per_variable[column] = best_params_drf\n","                print(\"bestParam:\", best_params_drf)\n","\n","                # berechnung der drf Kosten unter den jeweils besten Hyperparamter\n","                for variable, best_params_drf in best_params_per_variable.items():\n","                    min_node_size = best_params_drf['min_node_size']\n","                    num_trees = best_params_drf['num_trees']\n","\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]\n","                    DRF.fit(X_train, y_train[column])\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    for i in range(len(y_test)):\n","                              quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                              quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                              prediction = quantil_90[i]\n","\n","                              nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                              # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage > prediction:\n","                                  unterdeckungskosten = (nachfrage - prediction) * cu       # unmatched demand\n","                              else:\n","                                  unterdeckungskosten = 0\n","\n","                              # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage < prediction:\n","                                  überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                              else:\n","                                  überdeckungskosten = 0\n","\n","                              # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                              gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                              gesamtkosten_summe += gesamtkosten\n","\n","                    durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","\n","                delta_RFW     = 1-(rfw_score/costs_SAA)\n","                delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","                delta_DTW     = 1-(DTW_score/costs_SAA)\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","                table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, feature_name, cu/(cu+co)])\n","                result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","                print(result_table)\n","\n","\n","\n","    # Schleife für Service Level variation auf [calendric, lag] features\n","\n","    for column in y_train.columns:\n","        print(f\"Working on column: {column}\")\n","        X_train_cal_lag = X_train_features.get_group(column)[calendric_lag_features]\n","        X_test_cal_lag = X_test_features.get_group(column)[calendric_lag_features]\n","\n","        scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","        # SAA\n","        SAA = SampleAverageApproximationNewsvendor(cu, co)\n","        SAA.fit(X_train_cal_lag, y_train[column])\n","        saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test_cal_lag.shape[0])\n","        costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","        # Random Forest Grid Search und Kosten\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","            'n_estimators': [10, 20, 50, 100]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_RF = grid_search.best_params_\n","\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","        rfw_model.fit(X_train_cal_lag, y_train[column])\n","        rfw_predictions = rfw_model.predict(X_test_cal_lag)\n","        rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","        # kNNW\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","        param_grid = {\n","            'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","        }\n","\n","        grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_kNNW = grid_search.best_params_\n","\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","        kNNW_model.fit(X_train_cal_lag, y_train[column])\n","        knWW_predict = kNNW_model.predict(X_test_cal_lag)\n","        kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","        # Weighted DT\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_DTW = grid_search.best_params_\n","\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","        DTW_model.fit(X_train_cal_lag, y_train[column])\n","        DTW_prediction = DTW_model.predict(X_test_cal_lag)\n","        DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","        #drf Hpyerparameter finden\n","        best_average_costs = float('inf')\n","        best_params_drf = None\n","\n","         # Schleife über alle Parameterkombinationen\n","        for param_combination in param_combinations:\n","            min_node_size = param_combination['min_node_size']\n","            num_trees = param_combination['num_trees']\n","\n","            # Trainieren des Modells mit den aktuellen Parametern\n","            DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","            target = y_train[column]\n","            DRF.fit(X_train_cal_lag, target)\n","            out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","            gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","            # Schleife über alle Testpunkte\n","            for i in range(len(y_test)):\n","                quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                prediction = quantil_90[i]\n","\n","                nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage > prediction:\n","                    unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                else:\n","                    unterdeckungskosten = 0\n","\n","                # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage < prediction:\n","                    überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                else:\n","                    überdeckungskosten = 0\n","\n","                # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                gesamtkosten_summe += gesamtkosten\n","\n","\n","            # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","            durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","            # Wenn die aktuellen Durchschnittskosten besser sind, aktualisiere die besten Kosten und Parameter\n","            if durchschnittskosten_variable < best_average_costs:\n","                best_average_costs = durchschnittskosten_variable\n","                best_params_drf = param_combination\n","        table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","        best_params_per_variable[column] = best_params_drf\n","\n","        #kostenberechnung des DRF nachdem best Params bestimmt wurde\n","        for variable, best_params_drf in best_params_per_variable.items():\n","                min_node_size = best_params_drf['min_node_size']\n","                num_trees = best_params_drf['num_trees']\n","\n","                # Trainieren des Modells mit den besten Parametern auf dem Datensatz\n","                DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                target = y_train[column]\n","                DRF.fit(X_train_cal_lag, y_train[column])\n","                out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                # Schleife über alle Testpunkte\n","                for i in range(len(y_test)):\n","                    quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                    quantil_90 = [item[1] for item in quantile]   # Optimalwert je Testpunkt für das 90% Quantil\n","                    prediction = quantil_90[i]\n","\n","                    nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                    # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage > prediction:\n","                        unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                    else:\n","                        unterdeckungskosten = 0\n","\n","                    # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage < prediction:\n","                        überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                    else:\n","                        überdeckungskosten = 0\n","\n","                    # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                    gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                    gesamtkosten_summe += gesamtkosten\n","\n","                durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","                # Füge die Ergebnisse und besten Hyperparameter der aktuellen Spalte zur Tabelle hinzu\n","\n","        delta_RFW     = 1-(rfw_score/costs_SAA)\n","        delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","        delta_DTW     = 1-(DTW_score/costs_SAA)\n","        delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","        table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, \"calendric,lag\", cu/(cu+co)])\n","        result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","        print(result_table)\n","\n","\n","# Erstelle die Ergebnis-Tabelle\n","result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","\n","# Drucke die Ergebnis-Tabelle\n","print(\"Results Table:\")\n","print(result_table)\n"],"metadata":{"id":"urUcRSMFHv7q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["yaz_results = result_table"],"metadata":{"id":"qClq37cvbnQp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["display(HTML(yaz_results.to_html(classes='table table-scroll table-bordered')))"],"metadata":{"id":"9mMGgB1wxCCW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","import pickle\n","\n","with open('/content/gdrive/My Drive/results/yaz_results_all', 'wb') as f:\n","    pickle.dump(yaz_results, f)\n"],"metadata":{"id":"gn0zI2dAwyes","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695898707673,"user_tz":-120,"elapsed":17484,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"1d093610-287b-475b-b8c8-5e0a9cbb2fef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"markdown","source":["# Bakery"],"metadata":{"id":"hylZBU5DxfnQ"}},{"cell_type":"code","source":["Bakery = pd.read_csv(path_bakery)\n","data = Bakery"],"metadata":{"id":"EuHPee1KXkXT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","df = pd.DataFrame(data)\n","\n","#y\n","\n","y = df.pivot_table(index=['dayIndex', 'label'], columns='id', values='demand').reset_index().set_index('dayIndex')\n","y_train = y[y['label'] == 'train'].drop(columns=['label'])\n","y_test = y[y['label'] == 'test'].drop(columns=['label'])\n","\n","#X\n","\n","X_train_features = data[data['label'] == 'train'].groupby('id')\n","X_test_features = data[data['label'] == 'test'].groupby('id')\n","\n","calendric_features = ['weekday', 'month', 'year']\n","\n","lag_features = [\"demand__sum_values_7\", \"demand__median_7\", \"demand__mean_7\", \"demand__standard_deviation_7\", \"demand__variance_7\", \"demand__root_mean_square_7\", \"demand__maximum_7\", \"demand__absolute_maximum_7\", \"demand__minimum_7\", \"demand__sum_values_14\", \"demand__median_14\", \"demand__mean_14\", \"demand__standard_deviation_14\", \"demand__variance_14\", \"demand__root_mean_square_14\", \"demand__maximum_14\", \"demand__absolute_maximum_14\", \"demand__minimum_14\", \"demand__sum_values_28\", \"demand__median_28\", \"demand__mean_28\", \"demand__standard_deviation_28\", \"demand__variance_28\", \"demand__root_mean_square_28\", \"demand__maximum_28\", \"demand__absolute_maximum_28\", \"demand__minimum_28\"]\n","special_features = ['is_schoolholiday', 'is_holiday',\n","                       'is_holiday_next2days', 'rain', 'temperature', 'promotion_currentweek',\n","                       'promotion_lastweek']\n","\n","\n","calendric_features = calendric_features                                                   # calendric\n","calendric_lag_features = calendric_features + lag_features                                # calendric und lag\n","calendric_lag_special_features = calendric_features + lag_features + special_features     # calendric lag und special\n","\n","scaling_value_group = data.groupby('id', as_index=False)['scalingValue'].first()\n"],"metadata":{"id":"DVVTffMWxiBC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Service Level variation"],"metadata":{"id":"B8rVhelENCAS"}},{"cell_type":"code","source":["# Ignorieren von Warnungen\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","random.seed(0)\n","from IPython.core.display import display, HTML\n","display(HTML(\"<style>.container { width:100% !important; }</style>\"))\n","param_combinations = [\n","    {'min_node_size': 10, 'num_trees': 50},\n","    {'min_node_size': 10, 'num_trees': 100},\n","    {'min_node_size': 10, 'num_trees': 250},\n","    {'min_node_size': 10, 'num_trees': 500},\n","    {'min_node_size': 10, 'num_trees': 1000},\n","    {'min_node_size': 15, 'num_trees': 50},\n","    {'min_node_size': 15, 'num_trees': 100},\n","    {'min_node_size': 15, 'num_trees': 250},\n","    {'min_node_size': 15, 'num_trees': 500},\n","    {'min_node_size': 15, 'num_trees': 1000},\n","    {'min_node_size': 25, 'num_trees': 50},\n","    {'min_node_size': 25, 'num_trees': 100},\n","    {'min_node_size': 25, 'num_trees': 250},\n","    {'min_node_size': 25, 'num_trees': 500},\n","    {'min_node_size': 25, 'num_trees': 1000},\n","    {'min_node_size': 50, 'num_trees': 50},\n","    {'min_node_size': 50, 'num_trees': 100},\n","    {'min_node_size': 50, 'num_trees': 250},\n","    {'min_node_size': 50, 'num_trees': 500},\n","    {'min_node_size': 50, 'num_trees': 1000},\n","]\n","\n","feature_names = ['Calendric', 'calendric_lag_special']\n","\n","\n","# Listen der zu testenden Werte für cu und co\n","combinations = [(9, 1), (7.5, 2.5), (5, 5), (2.5, 7.5), (1, 9)]\n","\n","table_rows = []  # Liste für die Tabellenzeilen\n","best_params_per_variable = {}\n","table_data_drf = []\n","\n","\n","#X_train_cal = X_train.get_group([column])[calendric_features]\n","#X_train_cal_lag = X_train.get_group([column])[calendric_lag_features]\n","#X_train_cal_lag_spec = X_train.get_group([column])[calendric_lag_special_features]\n","\n","#X_test_cal = X_test.get_group([column])[calendric_features]\n","#X_test_cal_lag = X_test.get_group([column])[calendric_lag_features]\n","#X_test_cal_lag_spec = X_test.get_group([column])[calendric_lag_special_features]\n","\n","# Schleife für alle Service Level\n","for cu, co in combinations:\n","    print(f\"Testing cu = {cu}, co = {co}\")\n","\n","    \"\"\"\n","\n","    # Schleife für Szenario 3 : [calendric lag] und [special] Features jeweils einzeln\n","    if cu == 9 and co == 1:\n","\n","        for column in y_train.columns:\n","            print(f\"Working on column: {column}\")\n","\n","            #scaling factor je target\n","            scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","            # target auswahl\n","            X_train_cal = X_train_features.get_group(column)[calendric_features]\n","            X_train_cal_lag_spec = X_train_features.get_group(column)[calendric_lag_special_features]\n","            X_test_cal = X_test_features.get_group(column)[calendric_features]\n","            X_test_cal_lag_spec = X_test_features.get_group(column)[calendric_lag_special_features]\n","\n","            X_variation_pairs = [(X_train_cal, X_test_cal), (X_train_cal_lag_spec, X_test_cal_lag_spec)]\n","\n","            for i,  (X_train, X_test) in enumerate(X_variation_pairs):\n","\n","                feature_name = feature_names[i]  # Name des aktuellen Feature-Satzes\n","                print(f\"Testing cu = {cu}, co = {co}, Feature Name = {feature_name}\")\n","\n","                # SAA\n","                saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test.shape[0])\n","                costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","                # Random Forest Grid Search und Kosten\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","                    'n_estimators': [10, 20, 50, 100]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_RF = grid_search.best_params_\n","\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","                rfw_model.fit(X_train, y_train[column])\n","                rfw_predictions = rfw_model.predict(X_test)\n","                rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","                # kNNW\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","                param_grid = {\n","                    'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","                }\n","\n","                grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_kNNW = grid_search.best_params_\n","\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","                kNNW_model.fit(X_train, y_train[column])\n","                knWW_predict = kNNW_model.predict(X_test)\n","                kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","                # Weighted DT\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_DTW = grid_search.best_params_\n","\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","                DTW_model.fit(X_train, y_train[column])\n","                DTW_prediction = DTW_model.predict(X_test)\n","                DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","                #drf Paramterbestimmung\n","\n","                best_average_costs = float('inf')\n","                best_params_drf = None\n","                # Schleife über alle Parameterkombinationen\n","                for param_combination in param_combinations:\n","                    min_node_size = param_combination['min_node_size']\n","                    num_trees = param_combination['num_trees']\n","\n","                    # Trainieren des Modells mit den aktuellen Parametern\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]\n","                    DRF.fit(X_train, target)\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    # Schleife über alle Testpunkte\n","                    for i in range(len(y_test)):\n","                        quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                        quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                        prediction = quantil_90[i]\n","\n","                        nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                        # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage > prediction:\n","                            unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                        else:\n","                            unterdeckungskosten = 0\n","\n","                        # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage < prediction:\n","                            überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                        else:\n","                            überdeckungskosten = 0\n","\n","                        # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                        gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                        gesamtkosten_summe += gesamtkosten\n","\n","\n","                    # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","                    durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","                    # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","                    if durchschnittskosten_variable < best_average_costs:\n","                        best_average_costs = durchschnittskosten_variable\n","                        best_params_drf = param_combination\n","\n","                table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","                best_params_per_variable[column] = best_params_drf\n","                print(\"bestParam:\", best_params_drf)\n","                # berechnung der drf Kosten unter den jeweils besten Hyperparamter\n","                for variable, best_params_drf in best_params_per_variable.items():\n","                    min_node_size = best_params_drf['min_node_size']\n","                    num_trees = best_params_drf['num_trees']\n","\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                    DRF.fit(X_train, y_train[column])\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    for i in range(len(y_test)):\n","                              quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                              quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                              prediction = quantil_90[i]\n","\n","                              nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                              # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage > prediction:\n","                                  unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                              else:\n","                                  unterdeckungskosten = 0\n","\n","                              # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage < prediction:\n","                                  überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                              else:\n","                                  überdeckungskosten = 0\n","\n","                              # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                              gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                              gesamtkosten_summe += gesamtkosten\n","\n","                    durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","\n","                delta_RFW     = 1-(rfw_score/costs_SAA)\n","                delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","                delta_DTW     = 1-(DTW_score/costs_SAA)\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","                table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, feature_name, cu/(cu+co)])\n","                result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","                print(result_table)\n","\n","        \"\"\"\n","\n","    # Schleife für Calender+Lag Features über alle Service Level\n","    for column in y_train.columns:\n","        print(f\"Working on column: {column}\")\n","        X_train_cal_lag = X_train_features.get_group(column)[calendric_lag_features]\n","        X_test_cal_lag = X_test_features.get_group(column)[calendric_lag_features]\n","\n","        scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","        # SAA\n","        SAA = SampleAverageApproximationNewsvendor(cu, co)\n","        SAA.fit(X_train_cal_lag, y_train[column])\n","        saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test_cal_lag.shape[0])\n","        costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","        # Random Forest Grid Search und Kosten\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","            'n_estimators': [10, 20, 50, 100]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_RF = grid_search.best_params_\n","\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","        rfw_model.fit(X_train_cal_lag, y_train[column])\n","        rfw_predictions = rfw_model.predict(X_test_cal_lag)\n","        rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","        # kNNW\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","        param_grid = {\n","            'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","        }\n","\n","        grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_kNNW = grid_search.best_params_\n","\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","        kNNW_model.fit(X_train_cal_lag, y_train[column])\n","        knWW_predict = kNNW_model.predict(X_test_cal_lag)\n","        kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","        # Weighted DT\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_DTW = grid_search.best_params_\n","\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","        DTW_model.fit(X_train_cal_lag, y_train[column])\n","        DTW_prediction = DTW_model.predict(X_test_cal_lag)\n","        DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","        #drf Hpyerparameter finden\n","        best_average_costs = float('inf')\n","        best_params_drf = None\n","\n","         # Schleife über alle Parameterkombinationen\n","        for param_combination in param_combinations:\n","            min_node_size = param_combination['min_node_size']\n","            num_trees = param_combination['num_trees']\n","\n","            # Trainieren des Modells mit den aktuellen Parametern\n","            DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","            target = y_train[column]\n","            DRF.fit(X_train_cal_lag, target)\n","            out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","            gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","            # Schleife über alle Testpunkte\n","            for i in range(len(y_test)):\n","                quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                prediction = quantil_90[i]\n","\n","                nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage > prediction:\n","                    unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                else:\n","                    unterdeckungskosten = 0\n","\n","                # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage < prediction:\n","                    überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                else:\n","                    überdeckungskosten = 0\n","\n","                # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                gesamtkosten_summe += gesamtkosten\n","\n","\n","            # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","            durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","            # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","            if durchschnittskosten_variable < best_average_costs:\n","                best_average_costs = durchschnittskosten_variable\n","                best_params_drf = param_combination\n","        table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","        best_params_per_variable[column] = best_params_drf\n","\n","        for variable, best_params_drf in best_params_per_variable.items():\n","                min_node_size = best_params_drf['min_node_size']\n","                num_trees = best_params_drf['num_trees']\n","\n","                # Trainieren des Modells mit den besten Parametern auf dem gesamten Datensatz\n","                DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                DRF.fit(X_train_cal_lag, y_train[column])\n","                out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                # Schleife über alle Testpunkte\n","                for i in range(len(y_test)):\n","                    quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                    quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                    prediction = quantil_90[i]\n","\n","                    nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                    # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage > prediction:\n","                        unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                    else:\n","                        unterdeckungskosten = 0\n","\n","                    # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage < prediction:\n","                        überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                    else:\n","                        überdeckungskosten = 0\n","\n","                    # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                    gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                    gesamtkosten_summe += gesamtkosten\n","\n","                durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","                # Füge die Ergebnisse und besten Hyperparameter der aktuellen Spalte zur Tabelle hinzu\n","\n","        delta_RFW     = 1-(rfw_score/costs_SAA)\n","        delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","        delta_DTW     = 1-(DTW_score/costs_SAA)\n","        delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","        table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, \"calendric,lag\", cu/(cu+co)])\n","        result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","        print(result_table)\n","\n","# Erstelle die Ergebnis-Tabelle\n","result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","\n","# Drucke die Ergebnis-Tabelle\n","print(\"Results Table:\")\n","print(result_table)\n"],"metadata":{"id":"rqOn0IB-yX8B"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"5JsLe5kSIEm0"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","import pickle\n","\n","\n","\n","\n","bakery_results_SL_variation = result_table\n","\n","with open('/content/gdrive/My Drive/results/bakery_results_SL_variation', 'wb') as f:\n","    pickle.dump(bakery_results_SL_variation, f)\n","\n","# Erfolgsmeldung\n","print(\"DataFrame wurde mit Pickle gespeichert.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MTZQH87bjQ_E","executionInfo":{"status":"ok","timestamp":1695885179847,"user_tz":-120,"elapsed":2262,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"b165fed0-2d47-414e-dc8d-6b3125958edd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","DataFrame wurde mit Pickle gespeichert.\n"]}]},{"cell_type":"code","source":["# um die Datei wieder zu öffnen\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","import pickle\n","\n","with open('/content/gdrive/My Drive/results/bakery_results_SL_variation', 'rb') as f:\n","    loaded = pickle.load(f)\n"],"metadata":{"id":"mUDyit-8owlv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["display(HTML(loaded.to_html(classes='table table-scroll table-bordered')))"],"metadata":{"id":"sTCoq1HnEcnt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Feature variation"],"metadata":{"id":"FCOeEOEhpAe7"}},{"cell_type":"code","source":["# Ignorieren von Warnungen\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","random.seed(0)\n","from IPython.core.display import display, HTML\n","\n","param_combinations = [\n","    {'min_node_size': 10, 'num_trees': 50},\n","    {'min_node_size': 10, 'num_trees': 100},\n","    {'min_node_size': 10, 'num_trees': 250},\n","    {'min_node_size': 10, 'num_trees': 500},\n","    {'min_node_size': 10, 'num_trees': 1000},\n","    {'min_node_size': 15, 'num_trees': 50},\n","    {'min_node_size': 15, 'num_trees': 100},\n","    {'min_node_size': 15, 'num_trees': 250},\n","    {'min_node_size': 15, 'num_trees': 500},\n","    {'min_node_size': 15, 'num_trees': 1000},\n","    {'min_node_size': 25, 'num_trees': 50},\n","    {'min_node_size': 25, 'num_trees': 100},\n","    {'min_node_size': 25, 'num_trees': 250},\n","    {'min_node_size': 25, 'num_trees': 500},\n","    {'min_node_size': 25, 'num_trees': 1000},\n","    {'min_node_size': 50, 'num_trees': 50},\n","    {'min_node_size': 50, 'num_trees': 100},\n","    {'min_node_size': 50, 'num_trees': 250},\n","    {'min_node_size': 50, 'num_trees': 500},\n","    {'min_node_size': 50, 'num_trees': 1000},\n","]\n","\n","feature_names = ['Calendric', 'calendric_lag_special']\n","\n","\n","# Listen der zu testenden Werte für cu und co\n","combinations = [(9, 1), (7.5, 2.5), (5, 5), (2.5, 7.5), (1, 9)]\n","\n","table_rows = []  # Liste für die Tabellenzeilen\n","best_params_per_variable = {}\n","table_data_drf = []\n","\n","\n","# Schleife für alle Service Level\n","for cu, co in combinations:\n","    print(f\"Testing cu = {cu}, co = {co}\")\n","\n","\n","    # Schleife für Szenario 3 : [calendric lag] und [special] Features jeweils einzeln\n","    if cu == 9 and co == 1:\n","\n","        for column in y_train.columns:\n","            print(f\"Working on column: {column}\")\n","\n","            #scaling factor je target\n","            scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","            # target auswahl\n","            X_train_cal = X_train_features.get_group(column)[calendric_features]\n","            X_train_cal_lag_spec = X_train_features.get_group(column)[calendric_lag_special_features]\n","            X_test_cal = X_test_features.get_group(column)[calendric_features]\n","            X_test_cal_lag_spec = X_test_features.get_group(column)[calendric_lag_special_features]\n","\n","            X_variation_pairs = [(X_train_cal, X_test_cal), (X_train_cal_lag_spec, X_test_cal_lag_spec)]\n","\n","            for i,  (X_train, X_test) in enumerate(X_variation_pairs):\n","\n","                feature_name = feature_names[i]  # Name des aktuellen Feature-Satzes\n","                print(f\"Testing cu = {cu}, co = {co}, Feature Name = {feature_name}\")\n","\n","                # SAA\n","                saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test.shape[0])\n","                costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","                # Random Forest Grid Search und Kosten\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","                    'n_estimators': [10, 20, 50, 100]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_RF = grid_search.best_params_\n","\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","                rfw_model.fit(X_train, y_train[column])\n","                rfw_predictions = rfw_model.predict(X_test)\n","                rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","                # kNNW\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","                param_grid = {\n","                    'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","                }\n","\n","                grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_kNNW = grid_search.best_params_\n","\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","                kNNW_model.fit(X_train, y_train[column])\n","                knWW_predict = kNNW_model.predict(X_test)\n","                kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","                # Weighted DT\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_DTW = grid_search.best_params_\n","\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","                DTW_model.fit(X_train, y_train[column])\n","                DTW_prediction = DTW_model.predict(X_test)\n","                DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","                #drf Paramterbestimmung\n","\n","                best_average_costs = float('inf')\n","                best_params_drf = None\n","                # Schleife über alle Parameterkombinationen\n","                for param_combination in param_combinations:\n","                    min_node_size = param_combination['min_node_size']\n","                    num_trees = param_combination['num_trees']\n","\n","                    # Trainieren des Modells mit den aktuellen Parametern\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]\n","                    DRF.fit(X_train, target)\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    # Schleife über alle Testpunkte\n","                    for i in range(len(y_test)):\n","                        quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                        quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                        prediction = quantil_90[i]\n","\n","                        nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                        # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage > prediction:\n","                            unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                        else:\n","                            unterdeckungskosten = 0\n","\n","                        # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage < prediction:\n","                            überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                        else:\n","                            überdeckungskosten = 0\n","\n","                        # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                        gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                        gesamtkosten_summe += gesamtkosten\n","\n","\n","                    # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","                    durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","                    # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","                    if durchschnittskosten_variable < best_average_costs:\n","                        best_average_costs = durchschnittskosten_variable\n","                        best_params_drf = param_combination\n","\n","                table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","                best_params_per_variable[column] = best_params_drf\n","                print(\"bestParam:\", best_params_drf)\n","                # berechnung der drf Kosten unter den jeweils besten Hyperparamter\n","                for variable, best_params_drf in best_params_per_variable.items():\n","                    min_node_size = best_params_drf['min_node_size']\n","                    num_trees = best_params_drf['num_trees']\n","\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                    DRF.fit(X_train, y_train[column])\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    for i in range(len(y_test)):\n","                              quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                              quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                              prediction = quantil_90[i]\n","\n","                              nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                              # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage > prediction:\n","                                  unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                              else:\n","                                  unterdeckungskosten = 0\n","\n","                              # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage < prediction:\n","                                  überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                              else:\n","                                  überdeckungskosten = 0\n","\n","                              # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                              gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                              gesamtkosten_summe += gesamtkosten\n","\n","                    durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","\n","                delta_RFW     = 1-(rfw_score/costs_SAA)\n","                delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","                delta_DTW     = 1-(DTW_score/costs_SAA)\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","                table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, feature_name, cu/(cu+co)])\n","                result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","                print(result_table)\n","\n","        \"\"\"\n","\n","    # Schleife für Calender+Lag Features über alle Service Level\n","    for column in y_train.columns:\n","        print(f\"Working on column: {column}\")\n","        X_train_cal_lag = X_train_features.get_group(column)[calendric_lag_features]\n","        X_test_cal_lag = X_test_features.get_group(column)[calendric_lag_features]\n","\n","        scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","        # SAA\n","        SAA = SampleAverageApproximationNewsvendor(cu, co)\n","        SAA.fit(X_train_cal_lag, y_train[column])\n","        saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test_cal_lag.shape[0])\n","        costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","        # Random Forest Grid Search und Kosten\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","            'n_estimators': [10, 20, 50, 100]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_RF = grid_search.best_params_\n","\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","        rfw_model.fit(X_train_cal_lag, y_train[column])\n","        rfw_predictions = rfw_model.predict(X_test_cal_lag)\n","        rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","        # kNNW\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","        param_grid = {\n","            'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","        }\n","\n","        grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_kNNW = grid_search.best_params_\n","\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","        kNNW_model.fit(X_train_cal_lag, y_train[column])\n","        knWW_predict = kNNW_model.predict(X_test_cal_lag)\n","        kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","        # Weighted DT\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_DTW = grid_search.best_params_\n","\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","        DTW_model.fit(X_train_cal_lag, y_train[column])\n","        DTW_prediction = DTW_model.predict(X_test_cal_lag)\n","        DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","        #drf Hpyerparameter finden\n","        best_average_costs = float('inf')\n","        best_params_drf = None\n","\n","         # Schleife über alle Parameterkombinationen\n","        for param_combination in param_combinations:\n","            min_node_size = param_combination['min_node_size']\n","            num_trees = param_combination['num_trees']\n","\n","            # Trainieren des Modells mit den aktuellen Parametern\n","            DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","            target = y_train[column]\n","            DRF.fit(X_train_cal_lag, target)\n","            out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","            gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","            # Schleife über alle Testpunkte\n","            for i in range(len(y_test)):\n","                quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                prediction = quantil_90[i]\n","\n","                nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage > prediction:\n","                    unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                else:\n","                    unterdeckungskosten = 0\n","\n","                # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage < prediction:\n","                    überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                else:\n","                    überdeckungskosten = 0\n","\n","                # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                gesamtkosten_summe += gesamtkosten\n","\n","\n","            # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","            durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","            # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","            if durchschnittskosten_variable < best_average_costs:\n","                best_average_costs = durchschnittskosten_variable\n","                best_params_drf = param_combination\n","        table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","        best_params_per_variable[column] = best_params_drf\n","\n","        for variable, best_params_drf in best_params_per_variable.items():\n","                min_node_size = best_params_drf['min_node_size']\n","                num_trees = best_params_drf['num_trees']\n","\n","                # Trainieren des Modells mit den besten Parametern auf dem gesamten Datensatz\n","                DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                DRF.fit(X_train_cal_lag, y_train[column])\n","                out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                # Schleife über alle Testpunkte\n","                for i in range(len(y_test)):\n","                    quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                    quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                    prediction = quantil_90[i]\n","\n","                    nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                    # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage > prediction:\n","                        unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                    else:\n","                        unterdeckungskosten = 0\n","\n","                    # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage < prediction:\n","                        überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                    else:\n","                        überdeckungskosten = 0\n","\n","                    # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                    gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                    gesamtkosten_summe += gesamtkosten\n","\n","                durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","                # Füge die Ergebnisse und besten Hyperparameter der aktuellen Spalte zur Tabelle hinzu\n","\n","        delta_RFW     = 1-(rfw_score/costs_SAA)\n","        delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","        delta_DTW     = 1-(DTW_score/costs_SAA)\n","        delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","        table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, \"calendric,lag\", cu/(cu+co)])\n","        result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","        print(result_table)\n","          \"\"\"\n","# Erstelle die Ergebnis-Tabelle\n","result_table_bakery = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","\n","# Drucke die Ergebnis-Tabelle\n","print(\"Results Table:\")\n","print(result_table_bakery)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EBEngrQoo_v3","executionInfo":{"status":"ok","timestamp":1695909083776,"user_tz":-120,"elapsed":1542785,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"1f63aa72-049c-4674-a300-e65337f96014"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43mDie letzten 5000 Zeilen der Streamingausgabe wurden abgeschnitten.\u001b[0m\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","780  0.9  \n","781  0.9  \n","782  0.9  \n","783  0.9  \n","784  0.9  \n","\n","[785 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","785  46.0_109.0   9   1   SAA      20.099174   \n","786  46.0_109.0   9   1   RFW      14.752066   \n","787  46.0_109.0   9   1  kNNW      19.289256   \n","788  46.0_109.0   9   1   DTW      10.173554   \n","789  46.0_109.0   9   1   drf       9.597174   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","785                                                N/A       N/A   \n","786  {'max_depth': 4, 'min_samples_split': 6, 'n_es...  0.266036   \n","787                                {'n_neighbors': 64}  0.040296   \n","788          {'max_depth': 6, 'min_samples_split': 64}  0.493832   \n","789            {'min_node_size': 10, 'num_trees': 100}  0.522509   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","785  calendric_lag_special  0.9  \n","786  calendric_lag_special  0.9  \n","787  calendric_lag_special  0.9  \n","788  calendric_lag_special  0.9  \n","789  calendric_lag_special  0.9  \n","\n","[790 rows x 9 columns]\n","Working on column: 46.0_110.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 25, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","790  46.0_110.0   9   1   SAA      21.132231   \n","791  46.0_110.0   9   1   RFW      11.950413   \n","792  46.0_110.0   9   1  kNNW      17.958678   \n","793  46.0_110.0   9   1   DTW      12.090909   \n","794  46.0_110.0   9   1   drf      10.175260   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","790                                                N/A       N/A  Calendric   \n","791  {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.434494  Calendric   \n","792                                 {'n_neighbors': 8}  0.150176  Calendric   \n","793           {'max_depth': 2, 'min_samples_split': 2}  0.427845  Calendric   \n","794            {'min_node_size': 25, 'num_trees': 500}  0.518496  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","790  0.9  \n","791  0.9  \n","792  0.9  \n","793  0.9  \n","794  0.9  \n","\n","[795 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 25, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","795  46.0_110.0   9   1   SAA      21.132231   \n","796  46.0_110.0   9   1   RFW      18.834711   \n","797  46.0_110.0   9   1  kNNW      21.057851   \n","798  46.0_110.0   9   1   DTW       9.272727   \n","799  46.0_110.0   9   1   drf       8.531565   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","795                                                N/A       N/A   \n","796  {'max_depth': 10, 'min_samples_split': 64, 'n_...  0.108721   \n","797                                {'n_neighbors': 64}   0.00352   \n","798           {'max_depth': 4, 'min_samples_split': 2}  0.561205   \n","799            {'min_node_size': 25, 'num_trees': 100}  0.596277   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","795  calendric_lag_special  0.9  \n","796  calendric_lag_special  0.9  \n","797  calendric_lag_special  0.9  \n","798  calendric_lag_special  0.9  \n","799  calendric_lag_special  0.9  \n","\n","[800 rows x 9 columns]\n","Working on column: 48.0_101.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","800  48.0_101.0   9   1   SAA      63.181818   \n","801  48.0_101.0   9   1   RFW     142.280992   \n","802  48.0_101.0   9   1  kNNW     183.371901   \n","803  48.0_101.0   9   1   DTW     116.628099   \n","804  48.0_101.0   9   1   drf      87.970401   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","800                                                N/A       N/A  Calendric   \n","801  {'max_depth': 6, 'min_samples_split': 8, 'n_es... -1.251929  Calendric   \n","802                                 {'n_neighbors': 8} -1.902289  Calendric   \n","803           {'max_depth': 4, 'min_samples_split': 8} -0.845912  Calendric   \n","804            {'min_node_size': 50, 'num_trees': 500} -0.392337  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","800  0.9  \n","801  0.9  \n","802  0.9  \n","803  0.9  \n","804  0.9  \n","\n","[805 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","805  48.0_101.0   9   1   SAA      63.181818   \n","806  48.0_101.0   9   1   RFW      56.859504   \n","807  48.0_101.0   9   1  kNNW      83.239669   \n","808  48.0_101.0   9   1   DTW      45.347107   \n","809  48.0_101.0   9   1   drf      44.024677   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","805                                                N/A       N/A   \n","806  {'max_depth': 8, 'min_samples_split': 16, 'n_e...  0.100065   \n","807                               {'n_neighbors': 128} -0.317462   \n","808          {'max_depth': 6, 'min_samples_split': 64}  0.282276   \n","809            {'min_node_size': 10, 'num_trees': 100}  0.303207   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","805  calendric_lag_special  0.9  \n","806  calendric_lag_special  0.9  \n","807  calendric_lag_special  0.9  \n","808  calendric_lag_special  0.9  \n","809  calendric_lag_special  0.9  \n","\n","[810 rows x 9 columns]\n","Working on column: 48.0_109.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","810  48.0_109.0   9   1   SAA      11.363636   \n","811  48.0_109.0   9   1   RFW      13.652893   \n","812  48.0_109.0   9   1  kNNW      14.305785   \n","813  48.0_109.0   9   1   DTW      11.066116   \n","814  48.0_109.0   9   1   drf      11.611570   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","810                                                N/A       N/A  Calendric   \n","811  {'max_depth': 8, 'min_samples_split': 16, 'n_e... -0.201455  Calendric   \n","812                                {'n_neighbors': 64} -0.258909  Calendric   \n","813          {'max_depth': 4, 'min_samples_split': 16}  0.026182  Calendric   \n","814            {'min_node_size': 50, 'num_trees': 250} -0.021818  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","810  0.9  \n","811  0.9  \n","812  0.9  \n","813  0.9  \n","814  0.9  \n","\n","[815 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","815  48.0_109.0   9   1   SAA      11.363636   \n","816  48.0_109.0   9   1   RFW      11.190083   \n","817  48.0_109.0   9   1  kNNW      12.661157   \n","818  48.0_109.0   9   1   DTW      10.942149   \n","819  48.0_109.0   9   1   drf      10.735129   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","815                                                N/A       N/A   \n","816  {'max_depth': 8, 'min_samples_split': 32, 'n_e...  0.015273   \n","817                                {'n_neighbors': 64} -0.114182   \n","818          {'max_depth': 4, 'min_samples_split': 32}  0.037091   \n","819            {'min_node_size': 15, 'num_trees': 100}  0.055309   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","815  calendric_lag_special  0.9  \n","816  calendric_lag_special  0.9  \n","817  calendric_lag_special  0.9  \n","818  calendric_lag_special  0.9  \n","819  calendric_lag_special  0.9  \n","\n","[820 rows x 9 columns]\n","Working on column: 48.0_110.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","820  48.0_110.0   9   1   SAA      64.537190   \n","821  48.0_110.0   9   1   RFW     108.776860   \n","822  48.0_110.0   9   1  kNNW      58.628099   \n","823  48.0_110.0   9   1   DTW     107.289256   \n","824  48.0_110.0   9   1   drf      52.529756   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","820                                                N/A       N/A  Calendric   \n","821  {'max_depth': 10, 'min_samples_split': 8, 'n_e... -0.685491  Calendric   \n","822                               {'n_neighbors': 128}  0.091561  Calendric   \n","823          {'max_depth': 6, 'min_samples_split': 32} -0.662441  Calendric   \n","824            {'min_node_size': 50, 'num_trees': 500}  0.186054  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","820  0.9  \n","821  0.9  \n","822  0.9  \n","823  0.9  \n","824  0.9  \n","\n","[825 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","825  48.0_110.0   9   1   SAA      64.537190   \n","826  48.0_110.0   9   1   RFW      32.545455   \n","827  48.0_110.0   9   1  kNNW      59.000000   \n","828  48.0_110.0   9   1   DTW      25.479339   \n","829  48.0_110.0   9   1   drf      24.425018   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","825                                                N/A       N/A   \n","826  {'max_depth': 8, 'min_samples_split': 64, 'n_e...   0.49571   \n","827                                {'n_neighbors': 16}  0.085798   \n","828          {'max_depth': 4, 'min_samples_split': 32}  0.605199   \n","829             {'min_node_size': 10, 'num_trees': 50}  0.621536   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","825  calendric_lag_special  0.9  \n","826  calendric_lag_special  0.9  \n","827  calendric_lag_special  0.9  \n","828  calendric_lag_special  0.9  \n","829  calendric_lag_special  0.9  \n","\n","[830 rows x 9 columns]\n","Working on column: 49.0_101.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","830  49.0_101.0   9   1   SAA     101.322314   \n","831  49.0_101.0   9   1   RFW      56.636364   \n","832  49.0_101.0   9   1  kNNW      53.322314   \n","833  49.0_101.0   9   1   DTW      50.305785   \n","834  49.0_101.0   9   1   drf      50.569904   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","830                                                N/A       N/A  Calendric   \n","831  {'max_depth': 6, 'min_samples_split': 8, 'n_es...  0.441028  Calendric   \n","832                                 {'n_neighbors': 4}  0.473736  Calendric   \n","833          {'max_depth': 4, 'min_samples_split': 64}  0.503507  Calendric   \n","834             {'min_node_size': 10, 'num_trees': 50}  0.500901  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","830  0.9  \n","831  0.9  \n","832  0.9  \n","833  0.9  \n","834  0.9  \n","\n","[835 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","835  49.0_101.0   9   1   SAA     101.322314   \n","836  49.0_101.0   9   1   RFW     105.421488   \n","837  49.0_101.0   9   1  kNNW      86.512397   \n","838  49.0_101.0   9   1   DTW      39.057851   \n","839  49.0_101.0   9   1   drf      39.465763   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","835                                                N/A       N/A   \n","836  {'max_depth': 8, 'min_samples_split': 64, 'n_e... -0.040457   \n","837                                {'n_neighbors': 16}  0.146166   \n","838          {'max_depth': 6, 'min_samples_split': 64}  0.614519   \n","839             {'min_node_size': 10, 'num_trees': 50}  0.610493   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","835  calendric_lag_special  0.9  \n","836  calendric_lag_special  0.9  \n","837  calendric_lag_special  0.9  \n","838  calendric_lag_special  0.9  \n","839  calendric_lag_special  0.9  \n","\n","[840 rows x 9 columns]\n","Working on column: 49.0_109.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","840  49.0_109.0   9   1   SAA      19.074380   \n","841  49.0_109.0   9   1   RFW      11.958678   \n","842  49.0_109.0   9   1  kNNW      11.983471   \n","843  49.0_109.0   9   1   DTW      13.289256   \n","844  49.0_109.0   9   1   drf      12.063643   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","840                                                N/A       N/A  Calendric   \n","841  {'max_depth': 8, 'min_samples_split': 16, 'n_e...   0.37305  Calendric   \n","842                                 {'n_neighbors': 4}   0.37175  Calendric   \n","843           {'max_depth': 2, 'min_samples_split': 2}  0.303293  Calendric   \n","844             {'min_node_size': 15, 'num_trees': 50}  0.367547  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","840  0.9  \n","841  0.9  \n","842  0.9  \n","843  0.9  \n","844  0.9  \n","\n","[845 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 25, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","845  49.0_109.0   9   1   SAA      19.074380   \n","846  49.0_109.0   9   1   RFW      17.008264   \n","847  49.0_109.0   9   1  kNNW      16.636364   \n","848  49.0_109.0   9   1   DTW      10.760331   \n","849  49.0_109.0   9   1   drf      10.983811   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","845                                                N/A       N/A   \n","846  {'max_depth': 4, 'min_samples_split': 64, 'n_e...  0.108319   \n","847                                {'n_neighbors': 16}  0.127816   \n","848          {'max_depth': 6, 'min_samples_split': 64}  0.435875   \n","849            {'min_node_size': 25, 'num_trees': 100}  0.424159   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","845  calendric_lag_special  0.9  \n","846  calendric_lag_special  0.9  \n","847  calendric_lag_special  0.9  \n","848  calendric_lag_special  0.9  \n","849  calendric_lag_special  0.9  \n","\n","[850 rows x 9 columns]\n","Working on column: 49.0_110.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","850  49.0_110.0   9   1   SAA      19.090909   \n","851  49.0_110.0   9   1   RFW      16.611570   \n","852  49.0_110.0   9   1  kNNW      24.090909   \n","853  49.0_110.0   9   1   DTW      18.669421   \n","854  49.0_110.0   9   1   drf      16.431949   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","850                                                N/A       N/A  Calendric   \n","851  {'max_depth': 6, 'min_samples_split': 6, 'n_es...   0.12987  Calendric   \n","852                                 {'n_neighbors': 4} -0.261905  Calendric   \n","853          {'max_depth': 4, 'min_samples_split': 64}  0.022078  Calendric   \n","854           {'min_node_size': 50, 'num_trees': 1000}  0.139279  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","850  0.9  \n","851  0.9  \n","852  0.9  \n","853  0.9  \n","854  0.9  \n","\n","[855 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","855  49.0_110.0   9   1   SAA      19.090909   \n","856  49.0_110.0   9   1   RFW      18.719008   \n","857  49.0_110.0   9   1  kNNW      19.429752   \n","858  49.0_110.0   9   1   DTW      12.115702   \n","859  49.0_110.0   9   1   drf      12.460696   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","855                                                N/A       N/A   \n","856  {'max_depth': 8, 'min_samples_split': 64, 'n_e...  0.019481   \n","857                                {'n_neighbors': 64} -0.017749   \n","858           {'max_depth': 4, 'min_samples_split': 2}  0.365368   \n","859             {'min_node_size': 10, 'num_trees': 50}  0.347297   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","855  calendric_lag_special  0.9  \n","856  calendric_lag_special  0.9  \n","857  calendric_lag_special  0.9  \n","858  calendric_lag_special  0.9  \n","859  calendric_lag_special  0.9  \n","\n","[860 rows x 9 columns]\n","Working on column: 50.0_101.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","860  50.0_101.0   9   1   SAA      77.074380   \n","861  50.0_101.0   9   1   RFW      45.371901   \n","862  50.0_101.0   9   1  kNNW      43.181818   \n","863  50.0_101.0   9   1   DTW      40.338843   \n","864  50.0_101.0   9   1   drf      40.619835   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","860                                                N/A       N/A  Calendric   \n","861  {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.411323  Calendric   \n","862                                 {'n_neighbors': 4}  0.439738  Calendric   \n","863          {'max_depth': 6, 'min_samples_split': 64}  0.476624  Calendric   \n","864            {'min_node_size': 50, 'num_trees': 100}  0.472979  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","860  0.9  \n","861  0.9  \n","862  0.9  \n","863  0.9  \n","864  0.9  \n","\n","[865 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","865  50.0_101.0   9   1   SAA      77.074380   \n","866  50.0_101.0   9   1   RFW      64.900826   \n","867  50.0_101.0   9   1  kNNW      76.702479   \n","868  50.0_101.0   9   1   DTW      54.289256   \n","869  50.0_101.0   9   1   drf      38.390462   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","865                                                N/A       N/A   \n","866  {'max_depth': None, 'min_samples_split': 64, '...  0.157946   \n","867                                {'n_neighbors': 64}  0.004825   \n","868           {'max_depth': 2, 'min_samples_split': 2}  0.295625   \n","869            {'min_node_size': 15, 'num_trees': 250}  0.501904   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","865  calendric_lag_special  0.9  \n","866  calendric_lag_special  0.9  \n","867  calendric_lag_special  0.9  \n","868  calendric_lag_special  0.9  \n","869  calendric_lag_special  0.9  \n","\n","[870 rows x 9 columns]\n","Working on column: 50.0_109.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","870  50.0_109.0   9   1   SAA      12.214876   \n","871  50.0_109.0   9   1   RFW       9.123967   \n","872  50.0_109.0   9   1  kNNW      15.603306   \n","873  50.0_109.0   9   1   DTW       9.239669   \n","874  50.0_109.0   9   1   drf       8.765498   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","870                                                N/A       N/A  Calendric   \n","871  {'max_depth': 6, 'min_samples_split': 8, 'n_es...  0.253045  Calendric   \n","872                                 {'n_neighbors': 8} -0.277402  Calendric   \n","873           {'max_depth': 2, 'min_samples_split': 2}  0.243572  Calendric   \n","874            {'min_node_size': 50, 'num_trees': 100}  0.282392  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","870  0.9  \n","871  0.9  \n","872  0.9  \n","873  0.9  \n","874  0.9  \n","\n","[875 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","875  50.0_109.0   9   1   SAA      12.214876   \n","876  50.0_109.0   9   1   RFW      11.578512   \n","877  50.0_109.0   9   1  kNNW      12.487603   \n","878  50.0_109.0   9   1   DTW       7.677686   \n","879  50.0_109.0   9   1   drf       7.767494   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","875                                                N/A       N/A   \n","876  {'max_depth': 8, 'min_samples_split': 2, 'n_es...  0.052097   \n","877                               {'n_neighbors': 128} -0.022327   \n","878          {'max_depth': 4, 'min_samples_split': 32}  0.371448   \n","879            {'min_node_size': 10, 'num_trees': 100}  0.364096   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","875  calendric_lag_special  0.9  \n","876  calendric_lag_special  0.9  \n","877  calendric_lag_special  0.9  \n","878  calendric_lag_special  0.9  \n","879  calendric_lag_special  0.9  \n","\n","[880 rows x 9 columns]\n","Working on column: 50.0_110.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","880  50.0_110.0   9   1   SAA      24.495868   \n","881  50.0_110.0   9   1   RFW      29.652893   \n","882  50.0_110.0   9   1  kNNW      25.256198   \n","883  50.0_110.0   9   1   DTW      30.950413   \n","884  50.0_110.0   9   1   drf      23.941716   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","880                                                N/A       N/A  Calendric   \n","881  {'max_depth': 8, 'min_samples_split': 8, 'n_es... -0.210526  Calendric   \n","882                                 {'n_neighbors': 8} -0.031039  Calendric   \n","883          {'max_depth': 4, 'min_samples_split': 64} -0.263495  Calendric   \n","884             {'min_node_size': 50, 'num_trees': 50}  0.022622  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","880  0.9  \n","881  0.9  \n","882  0.9  \n","883  0.9  \n","884  0.9  \n","\n","[885 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","885  50.0_110.0   9   1   SAA      24.495868   \n","886  50.0_110.0   9   1   RFW      20.917355   \n","887  50.0_110.0   9   1  kNNW      23.148760   \n","888  50.0_110.0   9   1   DTW      19.289256   \n","889  50.0_110.0   9   1   drf      17.588941   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","885                                                N/A       N/A   \n","886  {'max_depth': None, 'min_samples_split': 16, '...  0.146086   \n","887                                {'n_neighbors': 64}  0.054993   \n","888           {'max_depth': 6, 'min_samples_split': 2}  0.212551   \n","889            {'min_node_size': 10, 'num_trees': 100}  0.281963   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","885  calendric_lag_special  0.9  \n","886  calendric_lag_special  0.9  \n","887  calendric_lag_special  0.9  \n","888  calendric_lag_special  0.9  \n","889  calendric_lag_special  0.9  \n","\n","[890 rows x 9 columns]\n","Working on column: 70.0_101.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","890  70.0_101.0   9   1   SAA     215.785124   \n","891  70.0_101.0   9   1   RFW     126.190083   \n","892  70.0_101.0   9   1  kNNW     116.256198   \n","893  70.0_101.0   9   1   DTW     127.512397   \n","894  70.0_101.0   9   1   drf     117.473554   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","890                                                N/A       N/A  Calendric   \n","891  {'max_depth': 6, 'min_samples_split': 32, 'n_e...  0.415205  Calendric   \n","892                                {'n_neighbors': 16}  0.461241  Calendric   \n","893          {'max_depth': 4, 'min_samples_split': 64}  0.409077  Calendric   \n","894            {'min_node_size': 10, 'num_trees': 250}  0.455599  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","890  0.9  \n","891  0.9  \n","892  0.9  \n","893  0.9  \n","894  0.9  \n","\n","[895 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","895  70.0_101.0   9   1   SAA     215.785124   \n","896  70.0_101.0   9   1   RFW     130.644628   \n","897  70.0_101.0   9   1  kNNW     128.743802   \n","898  70.0_101.0   9   1   DTW     100.909091   \n","899  70.0_101.0   9   1   drf      91.251658   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","895                                                N/A       N/A   \n","896  {'max_depth': 8, 'min_samples_split': 32, 'n_e...  0.394561   \n","897                                {'n_neighbors': 16}   0.40337   \n","898          {'max_depth': 4, 'min_samples_split': 64}  0.532363   \n","899             {'min_node_size': 10, 'num_trees': 50}  0.577118   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","895  calendric_lag_special  0.9  \n","896  calendric_lag_special  0.9  \n","897  calendric_lag_special  0.9  \n","898  calendric_lag_special  0.9  \n","899  calendric_lag_special  0.9  \n","\n","[900 rows x 9 columns]\n","Working on column: 70.0_109.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","900  70.0_109.0   9   1   SAA      45.603306   \n","901  70.0_109.0   9   1   RFW      21.595041   \n","902  70.0_109.0   9   1  kNNW      26.107438   \n","903  70.0_109.0   9   1   DTW      22.595041   \n","904  70.0_109.0   9   1   drf      20.593504   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","900                                                N/A       N/A  Calendric   \n","901  {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.526459  Calendric   \n","902                                {'n_neighbors': 64}   0.42751  Calendric   \n","903           {'max_depth': 2, 'min_samples_split': 2}  0.504531  Calendric   \n","904             {'min_node_size': 10, 'num_trees': 50}  0.548421  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","900  0.9  \n","901  0.9  \n","902  0.9  \n","903  0.9  \n","904  0.9  \n","\n","[905 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","905  70.0_109.0   9   1   SAA      45.603306   \n","906  70.0_109.0   9   1   RFW      43.446281   \n","907  70.0_109.0   9   1  kNNW      28.917355   \n","908  70.0_109.0   9   1   DTW      16.975207   \n","909  70.0_109.0   9   1   drf      15.819508   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","905                                                N/A       N/A   \n","906  {'max_depth': None, 'min_samples_split': 32, '...    0.0473   \n","907                                {'n_neighbors': 16}  0.365893   \n","908          {'max_depth': 4, 'min_samples_split': 64}  0.627764   \n","909             {'min_node_size': 10, 'num_trees': 50}  0.653106   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","905  calendric_lag_special  0.9  \n","906  calendric_lag_special  0.9  \n","907  calendric_lag_special  0.9  \n","908  calendric_lag_special  0.9  \n","909  calendric_lag_special  0.9  \n","\n","[910 rows x 9 columns]\n","Working on column: 70.0_110.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","910  70.0_110.0   9   1   SAA      42.512397   \n","911  70.0_110.0   9   1   RFW      32.314050   \n","912  70.0_110.0   9   1  kNNW      33.603306   \n","913  70.0_110.0   9   1   DTW      32.710744   \n","914  70.0_110.0   9   1   drf      30.689421   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","910                                                N/A       N/A  Calendric   \n","911  {'max_depth': 4, 'min_samples_split': 64, 'n_e...  0.239891  Calendric   \n","912                                {'n_neighbors': 64}  0.209565  Calendric   \n","913           {'max_depth': 2, 'min_samples_split': 2}   0.23056  Calendric   \n","914            {'min_node_size': 15, 'num_trees': 500}  0.278107  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","910  0.9  \n","911  0.9  \n","912  0.9  \n","913  0.9  \n","914  0.9  \n","\n","[915 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","915  70.0_110.0   9   1   SAA      42.512397   \n","916  70.0_110.0   9   1   RFW      36.446281   \n","917  70.0_110.0   9   1  kNNW      37.256198   \n","918  70.0_110.0   9   1   DTW      32.338843   \n","919  70.0_110.0   9   1   drf      27.800726   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","915                                                N/A       N/A   \n","916  {'max_depth': None, 'min_samples_split': 64, '...  0.142691   \n","917                                {'n_neighbors': 64}  0.123639   \n","918           {'max_depth': 2, 'min_samples_split': 2}  0.239308   \n","919            {'min_node_size': 10, 'num_trees': 250}  0.346056   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","915  calendric_lag_special  0.9  \n","916  calendric_lag_special  0.9  \n","917  calendric_lag_special  0.9  \n","918  calendric_lag_special  0.9  \n","919  calendric_lag_special  0.9  \n","\n","[920 rows x 9 columns]\n","Working on column: 71.0_101.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","920  71.0_101.0   9   1   SAA     253.900826   \n","921  71.0_101.0   9   1   RFW     158.454545   \n","922  71.0_101.0   9   1  kNNW     147.421488   \n","923  71.0_101.0   9   1   DTW     131.719008   \n","924  71.0_101.0   9   1   drf     138.070747   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","920                                                N/A       N/A  Calendric   \n","921  {'max_depth': 8, 'min_samples_split': 32, 'n_e...   0.37592  Calendric   \n","922                                {'n_neighbors': 16}  0.419374  Calendric   \n","923       {'max_depth': None, 'min_samples_split': 64}  0.481219  Calendric   \n","924            {'min_node_size': 10, 'num_trees': 500}  0.456202  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","920  0.9  \n","921  0.9  \n","922  0.9  \n","923  0.9  \n","924  0.9  \n","\n","[925 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","925  71.0_101.0   9   1   SAA     253.900826   \n","926  71.0_101.0   9   1   RFW     157.942149   \n","927  71.0_101.0   9   1  kNNW     159.132231   \n","928  71.0_101.0   9   1   DTW     163.462810   \n","929  71.0_101.0   9   1   drf     119.503867   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","925                                                N/A       N/A   \n","926  {'max_depth': 10, 'min_samples_split': 16, 'n_...  0.377938   \n","927                                {'n_neighbors': 16}   0.37325   \n","928           {'max_depth': 4, 'min_samples_split': 2}  0.356194   \n","929            {'min_node_size': 10, 'num_trees': 250}  0.529329   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","925  calendric_lag_special  0.9  \n","926  calendric_lag_special  0.9  \n","927  calendric_lag_special  0.9  \n","928  calendric_lag_special  0.9  \n","929  calendric_lag_special  0.9  \n","\n","[930 rows x 9 columns]\n","Working on column: 71.0_109.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","930  71.0_109.0   9   1   SAA      40.438017   \n","931  71.0_109.0   9   1   RFW      26.388430   \n","932  71.0_109.0   9   1  kNNW      29.636364   \n","933  71.0_109.0   9   1   DTW      22.801653   \n","934  71.0_109.0   9   1   drf      24.293797   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","930                                                N/A       N/A  Calendric   \n","931  {'max_depth': 4, 'min_samples_split': 2, 'n_es...  0.347435  Calendric   \n","932                                {'n_neighbors': 64}  0.267116  Calendric   \n","933           {'max_depth': 2, 'min_samples_split': 2}  0.436133  Calendric   \n","934            {'min_node_size': 15, 'num_trees': 100}  0.399234  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","930  0.9  \n","931  0.9  \n","932  0.9  \n","933  0.9  \n","934  0.9  \n","\n","[935 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","935  71.0_109.0   9   1   SAA      40.438017   \n","936  71.0_109.0   9   1   RFW      31.074380   \n","937  71.0_109.0   9   1  kNNW      28.900826   \n","938  71.0_109.0   9   1   DTW      25.710744   \n","939  71.0_109.0   9   1   drf      20.277402   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","935                                                N/A       N/A   \n","936  {'max_depth': None, 'min_samples_split': 64, '...  0.231555   \n","937                                {'n_neighbors': 16}  0.285306   \n","938           {'max_depth': 2, 'min_samples_split': 2}  0.364194   \n","939           {'min_node_size': 15, 'num_trees': 1000}  0.498556   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","935  calendric_lag_special  0.9  \n","936  calendric_lag_special  0.9  \n","937  calendric_lag_special  0.9  \n","938  calendric_lag_special  0.9  \n","939  calendric_lag_special  0.9  \n","\n","[940 rows x 9 columns]\n","Working on column: 71.0_110.0\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","940  71.0_110.0   9   1   SAA      40.140496   \n","941  71.0_110.0   9   1   RFW      33.859504   \n","942  71.0_110.0   9   1  kNNW      33.528926   \n","943  71.0_110.0   9   1   DTW      32.504132   \n","944  71.0_110.0   9   1   drf      32.720493   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166  Calendric   \n","2                                  {'n_neighbors': 16}  0.471719  Calendric   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618  Calendric   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376  Calendric   \n","..                                                 ...       ...        ...   \n","940                                                N/A       N/A  Calendric   \n","941  {'max_depth': None, 'min_samples_split': 32, '...  0.156475  Calendric   \n","942                                {'n_neighbors': 16}  0.164711  Calendric   \n","943          {'max_depth': 4, 'min_samples_split': 64}  0.190241  Calendric   \n","944            {'min_node_size': 10, 'num_trees': 500}  0.184851  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","940  0.9  \n","941  0.9  \n","942  0.9  \n","943  0.9  \n","944  0.9  \n","\n","[945 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","945  71.0_110.0   9   1   SAA      40.140496   \n","946  71.0_110.0   9   1   RFW      34.413223   \n","947  71.0_110.0   9   1  kNNW      40.140496   \n","948  71.0_110.0   9   1   DTW      36.280992   \n","949  71.0_110.0   9   1   drf      31.427812   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","945                                                N/A       N/A   \n","946  {'max_depth': 8, 'min_samples_split': 32, 'n_e...  0.142681   \n","947                                {'n_neighbors': 64}       0.0   \n","948          {'max_depth': 4, 'min_samples_split': 32}   0.09615   \n","949             {'min_node_size': 10, 'num_trees': 50}  0.217055   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","945  calendric_lag_special  0.9  \n","946  calendric_lag_special  0.9  \n","947  calendric_lag_special  0.9  \n","948  calendric_lag_special  0.9  \n","949  calendric_lag_special  0.9  \n","\n","[950 rows x 9 columns]\n","Testing cu = 7.5, co = 2.5\n","Testing cu = 5, co = 5\n","Testing cu = 2.5, co = 7.5\n","Testing cu = 1, co = 9\n","Results Table:\n","       Variable  cu  co Model  Average Costs  \\\n","0    17.0_101.0   9   1   SAA     243.280992   \n","1    17.0_101.0   9   1   RFW      91.190083   \n","2    17.0_101.0   9   1  kNNW     128.520661   \n","3    17.0_101.0   9   1   DTW     116.867769   \n","4    17.0_101.0   9   1   drf     105.492555   \n","..          ...  ..  ..   ...            ...   \n","945  71.0_110.0   9   1   SAA      40.140496   \n","946  71.0_110.0   9   1   RFW      34.413223   \n","947  71.0_110.0   9   1  kNNW      40.140496   \n","948  71.0_110.0   9   1   DTW      36.280992   \n","949  71.0_110.0   9   1   drf      31.427812   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': 6, 'min_samples_split': 2, 'n_es...  0.625166   \n","2                                  {'n_neighbors': 16}  0.471719   \n","3             {'max_depth': 2, 'min_samples_split': 2}  0.519618   \n","4              {'min_node_size': 10, 'num_trees': 500}  0.566376   \n","..                                                 ...       ...   \n","945                                                N/A       N/A   \n","946  {'max_depth': 8, 'min_samples_split': 32, 'n_e...  0.142681   \n","947                                {'n_neighbors': 64}       0.0   \n","948          {'max_depth': 4, 'min_samples_split': 32}   0.09615   \n","949             {'min_node_size': 10, 'num_trees': 50}  0.217055   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","945  calendric_lag_special  0.9  \n","946  calendric_lag_special  0.9  \n","947  calendric_lag_special  0.9  \n","948  calendric_lag_special  0.9  \n","949  calendric_lag_special  0.9  \n","\n","[950 rows x 9 columns]\n"]}]},{"cell_type":"code","source":["print(result_table_bakery)"],"metadata":{"id":"XWVyuMq9Kphj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bakery_results_feature_variation = result_table_bakery\n","\n","with open('/content/gdrive/My Drive/results/bakery_results_feature_variation', 'wb') as f:\n","    pickle.dump(bakery_results_feature_variation, f)\n","\n","print(\"erfolgreich gespeichert\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3usCzRx0DAFT","executionInfo":{"status":"ok","timestamp":1695909174249,"user_tz":-120,"elapsed":300,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"092612e0-356c-4267-bac4-4bb3c1a96ea1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["erfolgreich gespeichert\n"]}]},{"cell_type":"code","source":["with open('/content/gdrive/My Drive/results/bakery_results_SL_variation', 'rb') as f:\n","    bakery_sl = pickle.load(f)\n","with open('/content/gdrive/My Drive/results/bakery_results_feature_variation', 'rb') as f:\n","    bakery_feature = pickle.load(f)\n","\n","\n","bakery_result_all = pd.concat([bakery_sl, bakery_feature], ignore_index=True)\n","\n","with open('/content/gdrive/My Drive/results/bakery_result_all', 'wb') as f:\n","    pickle.dump(bakery_result_all, f)\n","print(\"save finished\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q54og9smDTa4","executionInfo":{"status":"ok","timestamp":1695909852571,"user_tz":-120,"elapsed":232,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"89c4bb61-1d04-4348-9e92-093ab63c3433"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["save finished\n"]}]},{"cell_type":"code","source":["print(bakery_result_all)"],"metadata":{"id":"fjKUBjuLF3Qj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["unique_sl_values = bakery_result_all['Variable'].unique()\n","\n","# Gib die eindeutigen Werte aus\n","print(unique_sl_values)"],"metadata":{"id":"WeeiCz5DGSvB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# M5"],"metadata":{"id":"33rL9P_0Mvqy"}},{"cell_type":"code","source":["#https://www.googleapis.com/drive/v3/files/1ZJGyI4OgTiPzo1ZMWhAIDjYSn0V590O9?alt=media&key=AIzaSyBcmx00DM0BiQLoIWcJTqZMexoKY402Vmo\n","\n","import gdown\n","url = \"https://www.googleapis.com/drive/v3/files/1LaGATL59DYo5TkPciQZF_1UpUHIMSjTI?alt=media&key=AIzaSyBcmx00DM0BiQLoIWcJTqZMexoKY402Vmo\"\n","output = 'M5'\n","gdown.download(url, output, quiet=False)\n","with open('M5', 'r') as file:\n","    data = file.read()\n","data = pd.read_csv('M5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pkNV68m0HBy-","executionInfo":{"status":"ok","timestamp":1696090229450,"user_tz":-120,"elapsed":6980,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"9533c39b-f83a-4b65-a1a3-a8cd4f9a228a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://www.googleapis.com/drive/v3/files/1LaGATL59DYo5TkPciQZF_1UpUHIMSjTI?alt=media&key=AIzaSyBcmx00DM0BiQLoIWcJTqZMexoKY402Vmo\n","To: /content/M5\n","149MB [00:03, 43.5MB/s]\n"]}]},{"cell_type":"code","source":["df = pd.DataFrame(data)\n","\n","#y\n","\n","y = df.pivot_table(index=['dayIndex', 'label'], columns='id', values='demand').reset_index().set_index('dayIndex')\n","y_train = y[y['label'] == 'train'].drop(columns=['label'])\n","y_test = y[y['label'] == 'test'].drop(columns=['label'])\n","\n","#X\n","\n","X_train_features = data[data['label'] == 'train'].groupby('id')\n","X_test_features = data[data['label'] == 'test'].groupby('id')\n","\n","calendric_features = ['weekday_FRI', 'weekday_MON', 'weekday_SAT', 'weekday_SUN', 'weekday_THU', 'weekday_TUE', 'weekday_WED', 'month_APR', 'month_AUF', 'month_DEC', 'month_FEB', 'month_JAN', 'month_JUL', 'month_JUN', 'month_MAR', 'month_MAY', 'month_NOC', 'month_OCT', 'month_SEP', 'year_2011', 'year_2012', 'year_2013', 'year_2014', 'year_2015', 'year_2016']\n","\n","lag_features = [\"demand__sum_values_7\", \"demand__median_7\", \"demand__mean_7\", \"demand__standard_deviation_7\", \"demand__variance_7\", \"demand__root_mean_square_7\", \"demand__maximum_7\", \"demand__absolute_maximum_7\", \"demand__minimum_7\", \"demand__sum_values_14\", \"demand__median_14\", \"demand__mean_14\", \"demand__standard_deviation_14\", \"demand__variance_14\", \"demand__root_mean_square_14\", \"demand__maximum_14\", \"demand__absolute_maximum_14\", \"demand__minimum_14\", \"demand__sum_values_28\", \"demand__median_28\", \"demand__mean_28\", \"demand__standard_deviation_28\", \"demand__variance_28\", \"demand__root_mean_square_28\", \"demand__maximum_28\", \"demand__absolute_maximum_28\", \"demand__minimum_28\"]\n","special_features = ['is_sporting_event', 'is_cultural_event', 'is_national_event',\n","                   'is_religious_event', 'is_snap_day']\n","\n","\n","calendric_features = calendric_features                                                   # calendric\n","calendric_lag_features = calendric_features + lag_features                                # calendric und lag\n","calendric_lag_special_features = calendric_features + lag_features + special_features     # calendric lag und special"],"metadata":{"id":"v2AIKnqsHEm_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(y_train)"],"metadata":{"id":"hoZlohLjIKOp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Service Level Variation"],"metadata":{"id":"WD8La_wZHOrd"}},{"cell_type":"code","source":["# Ignorieren von Warnungen\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","random.seed(0)\n","from IPython.core.display import display, HTML\n","param_combinations = [\n","    {'min_node_size': 10, 'num_trees': 50},\n","    {'min_node_size': 10, 'num_trees': 100},\n","    {'min_node_size': 10, 'num_trees': 250},\n","    {'min_node_size': 10, 'num_trees': 500},\n","    {'min_node_size': 10, 'num_trees': 1000},\n","    {'min_node_size': 15, 'num_trees': 50},\n","    {'min_node_size': 15, 'num_trees': 100},\n","    {'min_node_size': 15, 'num_trees': 250},\n","    {'min_node_size': 15, 'num_trees': 500},\n","    {'min_node_size': 15, 'num_trees': 1000},\n","    {'min_node_size': 25, 'num_trees': 50},\n","    {'min_node_size': 25, 'num_trees': 100},\n","    {'min_node_size': 25, 'num_trees': 250},\n","    {'min_node_size': 25, 'num_trees': 500},\n","    {'min_node_size': 25, 'num_trees': 1000},\n","    {'min_node_size': 50, 'num_trees': 50},\n","    {'min_node_size': 50, 'num_trees': 100},\n","    {'min_node_size': 50, 'num_trees': 250},\n","    {'min_node_size': 50, 'num_trees': 500},\n","    {'min_node_size': 50, 'num_trees': 1000},\n","]\n","\n","feature_names = ['Calendric', 'calendric_lag_special']\n","scaling_value_group = data.groupby('id', as_index=False)['scalingValue'].first()\n","\n","# Listen der zu testenden Werte für cu und co\n","combinations = [(9, 1), (7.5, 2.5), (5, 5), (2.5, 7.5), (1, 9)]\n","\n","table_rows = []  # Liste für die Tabellenzeilen\n","best_params_per_variable = {}\n","table_data_drf = []\n","\n","\n","# Schleife für alle Service Level\n","for cu, co in combinations:\n","    print(f\"Testing cu = {cu}, co = {co}\")\n","\n","\n","    \"\"\"\n","    # Schleife für Szenario 3 : calendric, lag, und special Features jeweils einzeln\n","    if cu == 9 and co == 1:\n","\n","\n","        for column in y_train.columns:\n","            print(f\"Working on column für Szenario 3: {column}\")\n","\n","            #scaling factor je target\n","            scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","            # target auswahl\n","            X_train_cal = X_train_features.get_group(column)[calendric_features]\n","            X_train_cal_lag_spec = X_train_features.get_group(column)[calendric_lag_special_features]\n","            X_test_cal = X_test_features.get_group(column)[calendric_features]\n","            X_test_cal_lag_spec = X_test_features.get_group(column)[calendric_lag_special_features]\n","\n","            X_variation_pairs = [(X_train_cal, X_test_cal), (X_train_cal_lag_spec, X_test_cal_lag_spec)]\n","\n","            for i,  (X_train, X_test) in enumerate(X_variation_pairs):\n","\n","                feature_name = feature_names[i]  # Name des aktuellen Feature-Satzes\n","                print(f\"Testing cu = {cu}, co = {co}, Feature Name = {feature_name}\")\n","\n","                # SAA\n","                saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test.shape[0])\n","                costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","                # Random Forest Grid Search und Kosten\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","                    'n_estimators': [10, 20, 50, 100]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_RF = grid_search.best_params_\n","\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","                rfw_model.fit(X_train, y_train[column])\n","                rfw_predictions = rfw_model.predict(X_test)\n","                rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","                print(\"rfw fertig\")\n","                # kNNW\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","                param_grid = {\n","                    'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","                }\n","\n","                grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_kNNW = grid_search.best_params_\n","\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","                kNNW_model.fit(X_train, y_train[column])\n","                knWW_predict = kNNW_model.predict(X_test)\n","                kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","                # Weighted DT\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_DTW = grid_search.best_params_\n","\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","                DTW_model.fit(X_train, y_train[column])\n","                DTW_prediction = DTW_model.predict(X_test)\n","                DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","                #drf Paramterbestimmung\n","\n","                best_average_costs = float('inf')\n","                best_params_drf = None\n","                # Schleife über alle Parameterkombinationen\n","                for param_combination in param_combinations:\n","                    min_node_size = param_combination['min_node_size']\n","                    num_trees = param_combination['num_trees']\n","\n","                    # Trainieren des Modells mit den aktuellen Parametern\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]\n","                    DRF.fit(X_train, target)\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    # Schleife über alle Testpunkte\n","                    for i in range(len(y_test)):\n","                        quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                        quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                        prediction = quantil_90[i]\n","\n","                        nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                        # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage > prediction:\n","                            unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                        else:\n","                            unterdeckungskosten = 0\n","\n","                        # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage < prediction:\n","                            überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                        else:\n","                            überdeckungskosten = 0\n","\n","                        # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                        gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                        gesamtkosten_summe += gesamtkosten\n","\n","\n","                    # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","                    durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","                    # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","                    if durchschnittskosten_variable < best_average_costs:\n","                        best_average_costs = durchschnittskosten_variable\n","                        best_params_drf = param_combination\n","\n","                table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","                best_params_per_variable[column] = best_params_drf\n","                print(\"bestParam:\", best_params_drf)\n","                # berechnung der drf Kosten unter den jeweils besten Hyperparamter\n","                for variable, best_params_drf in best_params_per_variable.items():\n","                    min_node_size = best_params_drf['min_node_size']\n","                    num_trees = best_params_drf['num_trees']\n","\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                    DRF.fit(X_train, y_train[column])\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    for i in range(len(y_test)):\n","                              quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                              quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                              prediction = quantil_90[i]\n","\n","                              nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                              # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage > prediction:\n","                                  unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                              else:\n","                                  unterdeckungskosten = 0\n","\n","                              # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage < prediction:\n","                                  überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                              else:\n","                                  überdeckungskosten = 0\n","\n","                              # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                              gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                              gesamtkosten_summe += gesamtkosten\n","\n","                    durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                print(\"rfw fertig\")\n","                delta_RFW     = 1-(rfw_score/costs_SAA)\n","                delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","                delta_DTW     = 1-(DTW_score/costs_SAA)\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","                table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, feature_name, cu/(cu+co)])\n","                result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","                print(result_table)\n","\n","\n","      \"\"\"\n","    # Schleife für Calender+Lag Features über alle Service Level\n","    for column in y_train.columns:\n","        print(f\"Working on  für Szenario 1+2 : {column}\")\n","        X_train_cal_lag = X_train_features.get_group(column)[calendric_lag_features]\n","        X_test_cal_lag = X_test_features.get_group(column)[calendric_lag_features]\n","\n","        scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","        # SAA\n","        SAA = SampleAverageApproximationNewsvendor(cu, co)\n","        SAA.fit(X_train_cal_lag, y_train[column])\n","        saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test_cal_lag.shape[0])\n","        costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","        # Random Forest Grid Search und Kosten\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","            'n_estimators': [10, 20, 50, 100]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_RF = grid_search.best_params_\n","\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","        rfw_model.fit(X_train_cal_lag, y_train[column])\n","        rfw_predictions = rfw_model.predict(X_test_cal_lag)\n","        rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","        # kNNW\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","        param_grid = {\n","            'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","        }\n","\n","        grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_kNNW = grid_search.best_params_\n","\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","        kNNW_model.fit(X_train_cal_lag, y_train[column])\n","        knWW_predict = kNNW_model.predict(X_test_cal_lag)\n","        kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","        # Weighted DT\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_DTW = grid_search.best_params_\n","\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","        DTW_model.fit(X_train_cal_lag, y_train[column])\n","        DTW_prediction = DTW_model.predict(X_test_cal_lag)\n","        DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","        #drf Hpyerparameter finden\n","        best_average_costs = float('inf')\n","        best_params_drf = None\n","\n","         # Schleife über alle Parameterkombinationen\n","        for param_combination in param_combinations:\n","            min_node_size = param_combination['min_node_size']\n","            num_trees = param_combination['num_trees']\n","\n","            # Trainieren des Modells mit den aktuellen Parametern\n","            DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","            target = y_train[column]\n","            DRF.fit(X_train_cal_lag, target)\n","            out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","            gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","            # Schleife über alle Testpunkte\n","            for i in range(len(y_test)):\n","                quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                prediction = quantil_90[i]\n","\n","                nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage > prediction:\n","                    unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                else:\n","                    unterdeckungskosten = 0\n","\n","                # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage < prediction:\n","                    überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                else:\n","                    überdeckungskosten = 0\n","\n","                # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                gesamtkosten_summe += gesamtkosten\n","\n","\n","            # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","            durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","            # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","            if durchschnittskosten_variable < best_average_costs:\n","                best_average_costs = durchschnittskosten_variable\n","                best_params_drf = param_combination\n","        table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","        best_params_per_variable[column] = best_params_drf\n","\n","        for variable, best_params_drf in best_params_per_variable.items():\n","                min_node_size = best_params_drf['min_node_size']\n","                num_trees = best_params_drf['num_trees']\n","\n","                # Trainieren des Modells mit den besten Parametern auf dem gesamten Datensatz\n","                DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                DRF.fit(X_train_cal_lag, y_train[column])\n","                out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                # Schleife über alle Testpunkte\n","                for i in range(len(y_test)):\n","                    quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                    quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                    prediction = quantil_90[i]\n","\n","                    nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                    # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage > prediction:\n","                        unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                    else:\n","                        unterdeckungskosten = 0\n","\n","                    # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage < prediction:\n","                        überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                    else:\n","                        überdeckungskosten = 0\n","\n","                    # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                    gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                    gesamtkosten_summe += gesamtkosten\n","\n","                durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","                # Füge die Ergebnisse und besten Hyperparameter der aktuellen Spalte zur Tabelle hinzu\n","\n","        delta_RFW     = 1-(rfw_score/costs_SAA)\n","        delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","        delta_DTW     = 1-(DTW_score/costs_SAA)\n","        delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","        table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, \"calendric,lag\", cu/(cu+co)])\n","        result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","        print(result_table)\n","\n","\n","# Erstelle die Ergebnis-Tabelle\n","result_table_M5 = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","\n","# Drucke die Ergebnis-Tabelle\n","print(\"Results Table:\")\n","print(result_table_M5)\n"],"metadata":{"id":"HN80JAnbHLdN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","import pickle\n","\n","with open('/content/gdrive/My Drive/results/m5_results_calendric_lag_sl (0.9, 0.75, 0.5)', 'wb') as f:\n","    pickle.dump(result_table_M5, f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sPNEX7UQPlrJ","executionInfo":{"status":"ok","timestamp":1696027321631,"user_tz":-120,"elapsed":15620,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"0c026a20-268c-4982-b773-143b45eb09aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["# Ignorieren von Warnungen\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","random.seed(0)\n","from IPython.core.display import display, HTML\n","param_combinations = [\n","    {'min_node_size': 10, 'num_trees': 50},\n","    {'min_node_size': 10, 'num_trees': 100},\n","    {'min_node_size': 10, 'num_trees': 250},\n","    {'min_node_size': 10, 'num_trees': 500},\n","    {'min_node_size': 10, 'num_trees': 1000},\n","    {'min_node_size': 15, 'num_trees': 50},\n","    {'min_node_size': 15, 'num_trees': 100},\n","    {'min_node_size': 15, 'num_trees': 250},\n","    {'min_node_size': 15, 'num_trees': 500},\n","    {'min_node_size': 15, 'num_trees': 1000},\n","    {'min_node_size': 25, 'num_trees': 50},\n","    {'min_node_size': 25, 'num_trees': 100},\n","    {'min_node_size': 25, 'num_trees': 250},\n","    {'min_node_size': 25, 'num_trees': 500},\n","    {'min_node_size': 25, 'num_trees': 1000},\n","    {'min_node_size': 50, 'num_trees': 50},\n","    {'min_node_size': 50, 'num_trees': 100},\n","    {'min_node_size': 50, 'num_trees': 250},\n","    {'min_node_size': 50, 'num_trees': 500},\n","    {'min_node_size': 50, 'num_trees': 1000},\n","]\n","\n","feature_names = ['Calendric', 'calendric_lag_special']\n","scaling_value_group = data.groupby('id', as_index=False)['scalingValue'].first()\n","\n","# Listen der zu testenden Werte für cu und co\n","combinations = [(2.5, 7.5), (1, 9)]\n","\n","table_rows = []  # Liste für die Tabellenzeilen\n","best_params_per_variable = {}\n","table_data_drf = []\n","\n","\n","# Schleife für alle Service Level\n","for cu, co in combinations:\n","    print(f\"Testing cu = {cu}, co = {co}\")\n","\n","\n","    \"\"\"\n","    # Schleife für Szenario 3 : calendric, lag, und special Features jeweils einzeln\n","    if cu == 9 and co == 1:\n","\n","\n","        for column in y_train.columns:\n","            print(f\"Working on column für Szenario 3: {column}\")\n","\n","            #scaling factor je target\n","            scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","            # target auswahl\n","            X_train_cal = X_train_features.get_group(column)[calendric_features]\n","            X_train_cal_lag_spec = X_train_features.get_group(column)[calendric_lag_special_features]\n","            X_test_cal = X_test_features.get_group(column)[calendric_features]\n","            X_test_cal_lag_spec = X_test_features.get_group(column)[calendric_lag_special_features]\n","\n","            X_variation_pairs = [(X_train_cal, X_test_cal), (X_train_cal_lag_spec, X_test_cal_lag_spec)]\n","\n","            for i,  (X_train, X_test) in enumerate(X_variation_pairs):\n","\n","                feature_name = feature_names[i]  # Name des aktuellen Feature-Satzes\n","                print(f\"Testing cu = {cu}, co = {co}, Feature Name = {feature_name}\")\n","\n","                # SAA\n","                saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test.shape[0])\n","                costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","                # Random Forest Grid Search und Kosten\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","                    'n_estimators': [10, 20, 50, 100]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_RF = grid_search.best_params_\n","\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","                rfw_model.fit(X_train, y_train[column])\n","                rfw_predictions = rfw_model.predict(X_test)\n","                rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","                print(\"rfw fertig\")\n","                # kNNW\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","                param_grid = {\n","                    'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","                }\n","\n","                grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_kNNW = grid_search.best_params_\n","\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","                kNNW_model.fit(X_train, y_train[column])\n","                knWW_predict = kNNW_model.predict(X_test)\n","                kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","                # Weighted DT\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_DTW = grid_search.best_params_\n","\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","                DTW_model.fit(X_train, y_train[column])\n","                DTW_prediction = DTW_model.predict(X_test)\n","                DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","                #drf Paramterbestimmung\n","\n","                best_average_costs = float('inf')\n","                best_params_drf = None\n","                # Schleife über alle Parameterkombinationen\n","                for param_combination in param_combinations:\n","                    min_node_size = param_combination['min_node_size']\n","                    num_trees = param_combination['num_trees']\n","\n","                    # Trainieren des Modells mit den aktuellen Parametern\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]\n","                    DRF.fit(X_train, target)\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    # Schleife über alle Testpunkte\n","                    for i in range(len(y_test)):\n","                        quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                        quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                        prediction = quantil_90[i]\n","\n","                        nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                        # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage > prediction:\n","                            unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                        else:\n","                            unterdeckungskosten = 0\n","\n","                        # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage < prediction:\n","                            überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                        else:\n","                            überdeckungskosten = 0\n","\n","                        # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                        gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                        gesamtkosten_summe += gesamtkosten\n","\n","\n","                    # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","                    durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","                    # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","                    if durchschnittskosten_variable < best_average_costs:\n","                        best_average_costs = durchschnittskosten_variable\n","                        best_params_drf = param_combination\n","\n","                table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","                best_params_per_variable[column] = best_params_drf\n","                print(\"bestParam:\", best_params_drf)\n","                # berechnung der drf Kosten unter den jeweils besten Hyperparamter\n","                for variable, best_params_drf in best_params_per_variable.items():\n","                    min_node_size = best_params_drf['min_node_size']\n","                    num_trees = best_params_drf['num_trees']\n","\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                    DRF.fit(X_train, y_train[column])\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    for i in range(len(y_test)):\n","                              quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                              quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                              prediction = quantil_90[i]\n","\n","                              nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                              # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage > prediction:\n","                                  unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                              else:\n","                                  unterdeckungskosten = 0\n","\n","                              # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage < prediction:\n","                                  überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                              else:\n","                                  überdeckungskosten = 0\n","\n","                              # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                              gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                              gesamtkosten_summe += gesamtkosten\n","\n","                    durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                print(\"rfw fertig\")\n","                delta_RFW     = 1-(rfw_score/costs_SAA)\n","                delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","                delta_DTW     = 1-(DTW_score/costs_SAA)\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","                table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, feature_name, cu/(cu+co)])\n","                result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","                print(result_table)\n","\n","\n","      \"\"\"\n","    # Schleife für Calender+Lag Features über alle Service Level\n","    for column in y_train.columns:\n","        print(f\"Working on  für Szenario 1+2 : {column}\")\n","        X_train_cal_lag = X_train_features.get_group(column)[calendric_lag_features]\n","        X_test_cal_lag = X_test_features.get_group(column)[calendric_lag_features]\n","\n","        scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","        # SAA\n","        SAA = SampleAverageApproximationNewsvendor(cu, co)\n","        SAA.fit(X_train_cal_lag, y_train[column])\n","        saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test_cal_lag.shape[0])\n","        costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","        # Random Forest Grid Search und Kosten\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","            'n_estimators': [10, 20, 50, 100]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_RF = grid_search.best_params_\n","\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","        rfw_model.fit(X_train_cal_lag, y_train[column])\n","        rfw_predictions = rfw_model.predict(X_test_cal_lag)\n","        rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","        # kNNW\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","        param_grid = {\n","            'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","        }\n","\n","        grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_kNNW = grid_search.best_params_\n","\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","        kNNW_model.fit(X_train_cal_lag, y_train[column])\n","        knWW_predict = kNNW_model.predict(X_test_cal_lag)\n","        kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","        # Weighted DT\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_DTW = grid_search.best_params_\n","\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","        DTW_model.fit(X_train_cal_lag, y_train[column])\n","        DTW_prediction = DTW_model.predict(X_test_cal_lag)\n","        DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","        #drf Hpyerparameter finden\n","        best_average_costs = float('inf')\n","        best_params_drf = None\n","\n","         # Schleife über alle Parameterkombinationen\n","        for param_combination in param_combinations:\n","            min_node_size = param_combination['min_node_size']\n","            num_trees = param_combination['num_trees']\n","\n","            # Trainieren des Modells mit den aktuellen Parametern\n","            DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","            target = y_train[column]\n","            DRF.fit(X_train_cal_lag, target)\n","            out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","            gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","            # Schleife über alle Testpunkte\n","            for i in range(len(y_test)):\n","                quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                prediction = quantil_90[i]\n","\n","                nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage > prediction:\n","                    unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                else:\n","                    unterdeckungskosten = 0\n","\n","                # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage < prediction:\n","                    überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                else:\n","                    überdeckungskosten = 0\n","\n","                # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                gesamtkosten_summe += gesamtkosten\n","\n","\n","            # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","            durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","            # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","            if durchschnittskosten_variable < best_average_costs:\n","                best_average_costs = durchschnittskosten_variable\n","                best_params_drf = param_combination\n","        table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","        best_params_per_variable[column] = best_params_drf\n","\n","        for variable, best_params_drf in best_params_per_variable.items():\n","                min_node_size = best_params_drf['min_node_size']\n","                num_trees = best_params_drf['num_trees']\n","\n","                # Trainieren des Modells mit den besten Parametern auf dem gesamten Datensatz\n","                DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                DRF.fit(X_train_cal_lag, y_train[column])\n","                out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                # Schleife über alle Testpunkte\n","                for i in range(len(y_test)):\n","                    quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                    quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                    prediction = quantil_90[i]\n","\n","                    nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                    # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage > prediction:\n","                        unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                    else:\n","                        unterdeckungskosten = 0\n","\n","                    # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage < prediction:\n","                        überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                    else:\n","                        überdeckungskosten = 0\n","\n","                    # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                    gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                    gesamtkosten_summe += gesamtkosten\n","\n","                durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","                # Füge die Ergebnisse und besten Hyperparameter der aktuellen Spalte zur Tabelle hinzu\n","\n","        delta_RFW     = 1-(rfw_score/costs_SAA)\n","        delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","        delta_DTW     = 1-(DTW_score/costs_SAA)\n","        delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","        table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, \"calendric,lag\", cu/(cu+co)])\n","        result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","        print(result_table)\n","\n","\n","# Erstelle die Ergebnis-Tabelle\n","result_table_M5 = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","\n","# Drucke die Ergebnis-Tabelle\n","print(\"Results Table:\")\n","print(result_table_M5)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T2t-6Kc621u3","outputId":"6d300cf4-9d77-464b-999c-ef16d76b0fb3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43mDie letzten 5000 Zeilen der Streamingausgabe wurden abgeschnitten.\u001b[0m\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","565  CA_2_FOODS_3_252  1.0  9.0   SAA      28.857143   \n","566  CA_2_FOODS_3_252  1.0  9.0   RFW      19.250000   \n","567  CA_2_FOODS_3_252  1.0  9.0  kNNW      19.321429   \n","568  CA_2_FOODS_3_252  1.0  9.0   DTW      16.214286   \n","569  CA_2_FOODS_3_252  1.0  9.0   drf      17.926719   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","565                                                N/A       N/A   \n","566  {'max_depth': 10, 'min_samples_split': 32, 'n_...  0.332921   \n","567                                {'n_neighbors': 64}  0.330446   \n","568          {'max_depth': 6, 'min_samples_split': 32}  0.438119   \n","569             {'min_node_size': 15, 'num_trees': 50}  0.378777   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","565  calendric,lag  0.10  \n","566  calendric,lag  0.10  \n","567  calendric,lag  0.10  \n","568  calendric,lag  0.10  \n","569  calendric,lag  0.10  \n","\n","[570 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_2_FOODS_3_377\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","570  CA_2_FOODS_3_377  1.0  9.0   SAA       3.964286   \n","571  CA_2_FOODS_3_377  1.0  9.0   RFW       3.607143   \n","572  CA_2_FOODS_3_377  1.0  9.0  kNNW       3.500000   \n","573  CA_2_FOODS_3_377  1.0  9.0   DTW       3.607143   \n","574  CA_2_FOODS_3_377  1.0  9.0   drf       3.550021   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","570                                                N/A       N/A   \n","571  {'max_depth': 10, 'min_samples_split': 64, 'n_...   0.09009   \n","572                               {'n_neighbors': 128}  0.117117   \n","573           {'max_depth': 2, 'min_samples_split': 2}   0.09009   \n","574             {'min_node_size': 15, 'num_trees': 50}  0.104499   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","570  calendric,lag  0.10  \n","571  calendric,lag  0.10  \n","572  calendric,lag  0.10  \n","573  calendric,lag  0.10  \n","574  calendric,lag  0.10  \n","\n","[575 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_2_FOODS_3_555\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","575  CA_2_FOODS_3_555  1.0  9.0   SAA      14.321429   \n","576  CA_2_FOODS_3_555  1.0  9.0   RFW      10.464286   \n","577  CA_2_FOODS_3_555  1.0  9.0  kNNW      10.464286   \n","578  CA_2_FOODS_3_555  1.0  9.0   DTW      11.071429   \n","579  CA_2_FOODS_3_555  1.0  9.0   drf       9.928571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","575                                                N/A       N/A   \n","576  {'max_depth': None, 'min_samples_split': 8, 'n...  0.269327   \n","577                                {'n_neighbors': 64}  0.269327   \n","578          {'max_depth': 6, 'min_samples_split': 64}  0.226933   \n","579             {'min_node_size': 15, 'num_trees': 50}  0.306733   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","575  calendric,lag  0.10  \n","576  calendric,lag  0.10  \n","577  calendric,lag  0.10  \n","578  calendric,lag  0.10  \n","579  calendric,lag  0.10  \n","\n","[580 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_2_FOODS_3_586\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","580  CA_2_FOODS_3_586  1.0  9.0   SAA      21.000000   \n","581  CA_2_FOODS_3_586  1.0  9.0   RFW      14.821429   \n","582  CA_2_FOODS_3_586  1.0  9.0  kNNW      13.607143   \n","583  CA_2_FOODS_3_586  1.0  9.0   DTW      13.821429   \n","584  CA_2_FOODS_3_586  1.0  9.0   drf      13.035714   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","580                                                N/A       N/A   \n","581  {'max_depth': None, 'min_samples_split': 16, '...  0.294218   \n","582                                {'n_neighbors': 16}  0.352041   \n","583          {'max_depth': 6, 'min_samples_split': 64}  0.341837   \n","584             {'min_node_size': 15, 'num_trees': 50}  0.379252   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","580  calendric,lag  0.10  \n","581  calendric,lag  0.10  \n","582  calendric,lag  0.10  \n","583  calendric,lag  0.10  \n","584  calendric,lag  0.10  \n","\n","[585 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_2_FOODS_3_668\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","585  CA_2_FOODS_3_668  1.0  9.0   SAA       3.750000   \n","586  CA_2_FOODS_3_668  1.0  9.0   RFW       3.785714   \n","587  CA_2_FOODS_3_668  1.0  9.0  kNNW       3.607143   \n","588  CA_2_FOODS_3_668  1.0  9.0   DTW       3.892857   \n","589  CA_2_FOODS_3_668  1.0  9.0   drf       3.821429   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","585                                                N/A       N/A   \n","586  {'max_depth': None, 'min_samples_split': 16, '... -0.009524   \n","587                                {'n_neighbors': 64}  0.038095   \n","588           {'max_depth': 2, 'min_samples_split': 2} -0.038095   \n","589             {'min_node_size': 15, 'num_trees': 50} -0.019048   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","585  calendric,lag  0.10  \n","586  calendric,lag  0.10  \n","587  calendric,lag  0.10  \n","588  calendric,lag  0.10  \n","589  calendric,lag  0.10  \n","\n","[590 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_2_FOODS_3_694\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","590  CA_2_FOODS_3_694  1.0  9.0   SAA       5.750000   \n","591  CA_2_FOODS_3_694  1.0  9.0   RFW       6.428571   \n","592  CA_2_FOODS_3_694  1.0  9.0  kNNW       5.642857   \n","593  CA_2_FOODS_3_694  1.0  9.0   DTW       4.964286   \n","594  CA_2_FOODS_3_694  1.0  9.0   drf       5.250000   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","590                                                N/A       N/A   \n","591  {'max_depth': None, 'min_samples_split': 16, '... -0.118012   \n","592                               {'n_neighbors': 128}  0.018634   \n","593          {'max_depth': 4, 'min_samples_split': 64}  0.136646   \n","594             {'min_node_size': 15, 'num_trees': 50}  0.086957   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","590  calendric,lag  0.10  \n","591  calendric,lag  0.10  \n","592  calendric,lag  0.10  \n","593  calendric,lag  0.10  \n","594  calendric,lag  0.10  \n","\n","[595 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_2_FOODS_3_714\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","595  CA_2_FOODS_3_714  1.0  9.0   SAA      20.571429   \n","596  CA_2_FOODS_3_714  1.0  9.0   RFW      15.428571   \n","597  CA_2_FOODS_3_714  1.0  9.0  kNNW      12.892857   \n","598  CA_2_FOODS_3_714  1.0  9.0   DTW      12.857143   \n","599  CA_2_FOODS_3_714  1.0  9.0   drf      12.892857   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","595                                                N/A       N/A   \n","596  {'max_depth': None, 'min_samples_split': 64, '...      0.25   \n","597                                {'n_neighbors': 64}  0.373264   \n","598          {'max_depth': 4, 'min_samples_split': 32}     0.375   \n","599             {'min_node_size': 15, 'num_trees': 50}  0.373264   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","595  calendric,lag  0.10  \n","596  calendric,lag  0.10  \n","597  calendric,lag  0.10  \n","598  calendric,lag  0.10  \n","599  calendric,lag  0.10  \n","\n","[600 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_080\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","600  CA_3_FOODS_3_080  1.0  9.0   SAA       5.571429   \n","601  CA_3_FOODS_3_080  1.0  9.0   RFW       5.357143   \n","602  CA_3_FOODS_3_080  1.0  9.0  kNNW       5.535714   \n","603  CA_3_FOODS_3_080  1.0  9.0   DTW       5.392857   \n","604  CA_3_FOODS_3_080  1.0  9.0   drf       5.402629   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","600                                                N/A       N/A   \n","601  {'max_depth': None, 'min_samples_split': 32, '...  0.038462   \n","602                               {'n_neighbors': 128}   0.00641   \n","603          {'max_depth': 4, 'min_samples_split': 64}  0.032051   \n","604             {'min_node_size': 15, 'num_trees': 50}  0.030297   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","600  calendric,lag  0.10  \n","601  calendric,lag  0.10  \n","602  calendric,lag  0.10  \n","603  calendric,lag  0.10  \n","604  calendric,lag  0.10  \n","\n","[605 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_226\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","605  CA_3_FOODS_3_226  1.0  9.0   SAA       4.000000   \n","606  CA_3_FOODS_3_226  1.0  9.0   RFW       3.714286   \n","607  CA_3_FOODS_3_226  1.0  9.0  kNNW       3.285714   \n","608  CA_3_FOODS_3_226  1.0  9.0   DTW       3.607143   \n","609  CA_3_FOODS_3_226  1.0  9.0   drf       3.893666   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","605                                                N/A       N/A   \n","606  {'max_depth': 10, 'min_samples_split': 8, 'n_e...  0.071429   \n","607                               {'n_neighbors': 128}  0.178571   \n","608          {'max_depth': 6, 'min_samples_split': 64}  0.098214   \n","609             {'min_node_size': 15, 'num_trees': 50}  0.026584   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","605  calendric,lag  0.10  \n","606  calendric,lag  0.10  \n","607  calendric,lag  0.10  \n","608  calendric,lag  0.10  \n","609  calendric,lag  0.10  \n","\n","[610 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_228\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","610  CA_3_FOODS_3_228  1.0  9.0   SAA       5.285714   \n","611  CA_3_FOODS_3_228  1.0  9.0   RFW       5.214286   \n","612  CA_3_FOODS_3_228  1.0  9.0  kNNW       5.785714   \n","613  CA_3_FOODS_3_228  1.0  9.0   DTW       5.785714   \n","614  CA_3_FOODS_3_228  1.0  9.0   drf       5.428571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","610                                                N/A       N/A   \n","611  {'max_depth': 6, 'min_samples_split': 16, 'n_e...  0.013514   \n","612                               {'n_neighbors': 128} -0.094595   \n","613          {'max_depth': 4, 'min_samples_split': 64} -0.094595   \n","614             {'min_node_size': 15, 'num_trees': 50} -0.027027   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","610  calendric,lag  0.10  \n","611  calendric,lag  0.10  \n","612  calendric,lag  0.10  \n","613  calendric,lag  0.10  \n","614  calendric,lag  0.10  \n","\n","[615 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_252\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","615  CA_3_FOODS_3_252  1.0  9.0   SAA      37.642857   \n","616  CA_3_FOODS_3_252  1.0  9.0   RFW      28.035714   \n","617  CA_3_FOODS_3_252  1.0  9.0  kNNW      27.392857   \n","618  CA_3_FOODS_3_252  1.0  9.0   DTW      27.500000   \n","619  CA_3_FOODS_3_252  1.0  9.0   drf      27.408968   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","615                                                N/A       N/A   \n","616  {'max_depth': None, 'min_samples_split': 16, '...  0.255218   \n","617                                {'n_neighbors': 64}  0.272296   \n","618          {'max_depth': 4, 'min_samples_split': 64}   0.26945   \n","619             {'min_node_size': 15, 'num_trees': 50}  0.271868   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","615  calendric,lag  0.10  \n","616  calendric,lag  0.10  \n","617  calendric,lag  0.10  \n","618  calendric,lag  0.10  \n","619  calendric,lag  0.10  \n","\n","[620 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_377\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","620  CA_3_FOODS_3_377  1.0  9.0   SAA       5.750000   \n","621  CA_3_FOODS_3_377  1.0  9.0   RFW       5.785714   \n","622  CA_3_FOODS_3_377  1.0  9.0  kNNW       6.071429   \n","623  CA_3_FOODS_3_377  1.0  9.0   DTW       5.821429   \n","624  CA_3_FOODS_3_377  1.0  9.0   drf       6.077501   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","620                                                N/A       N/A   \n","621  {'max_depth': None, 'min_samples_split': 64, '... -0.006211   \n","622                               {'n_neighbors': 128} -0.055901   \n","623           {'max_depth': 2, 'min_samples_split': 2} -0.012422   \n","624             {'min_node_size': 15, 'num_trees': 50} -0.056957   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","620  calendric,lag  0.10  \n","621  calendric,lag  0.10  \n","622  calendric,lag  0.10  \n","623  calendric,lag  0.10  \n","624  calendric,lag  0.10  \n","\n","[625 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_555\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","625  CA_3_FOODS_3_555  1.0  9.0   SAA      15.035714   \n","626  CA_3_FOODS_3_555  1.0  9.0   RFW      14.857143   \n","627  CA_3_FOODS_3_555  1.0  9.0  kNNW      16.035714   \n","628  CA_3_FOODS_3_555  1.0  9.0   DTW      16.821429   \n","629  CA_3_FOODS_3_555  1.0  9.0   drf      14.642857   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","625                                                N/A       N/A   \n","626  {'max_depth': None, 'min_samples_split': 16, '...  0.011876   \n","627                                {'n_neighbors': 64} -0.066508   \n","628           {'max_depth': 2, 'min_samples_split': 2} -0.118765   \n","629             {'min_node_size': 15, 'num_trees': 50}  0.026128   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","625  calendric,lag  0.10  \n","626  calendric,lag  0.10  \n","627  calendric,lag  0.10  \n","628  calendric,lag  0.10  \n","629  calendric,lag  0.10  \n","\n","[630 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_586\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","630  CA_3_FOODS_3_586  1.0  9.0   SAA      27.964286   \n","631  CA_3_FOODS_3_586  1.0  9.0   RFW      27.250000   \n","632  CA_3_FOODS_3_586  1.0  9.0  kNNW      23.214286   \n","633  CA_3_FOODS_3_586  1.0  9.0   DTW      27.464286   \n","634  CA_3_FOODS_3_586  1.0  9.0   drf      25.876064   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","630                                                N/A       N/A   \n","631  {'max_depth': None, 'min_samples_split': 8, 'n...  0.025543   \n","632                                {'n_neighbors': 16}   0.16986   \n","633           {'max_depth': 2, 'min_samples_split': 2}   0.01788   \n","634             {'min_node_size': 15, 'num_trees': 50}  0.074675   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","630  calendric,lag  0.10  \n","631  calendric,lag  0.10  \n","632  calendric,lag  0.10  \n","633  calendric,lag  0.10  \n","634  calendric,lag  0.10  \n","\n","[635 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_668\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","635  CA_3_FOODS_3_668  1.0  9.0   SAA       6.500000   \n","636  CA_3_FOODS_3_668  1.0  9.0   RFW       6.357143   \n","637  CA_3_FOODS_3_668  1.0  9.0  kNNW       5.357143   \n","638  CA_3_FOODS_3_668  1.0  9.0   DTW       5.571429   \n","639  CA_3_FOODS_3_668  1.0  9.0   drf       6.443115   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","635                                                N/A       N/A   \n","636  {'max_depth': 8, 'min_samples_split': 6, 'n_es...  0.021978   \n","637                               {'n_neighbors': 128}  0.175824   \n","638           {'max_depth': 2, 'min_samples_split': 2}  0.142857   \n","639             {'min_node_size': 15, 'num_trees': 50}  0.008752   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","635  calendric,lag  0.10  \n","636  calendric,lag  0.10  \n","637  calendric,lag  0.10  \n","638  calendric,lag  0.10  \n","639  calendric,lag  0.10  \n","\n","[640 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_694\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","640  CA_3_FOODS_3_694  1.0  9.0   SAA      13.035714   \n","641  CA_3_FOODS_3_694  1.0  9.0   RFW      11.750000   \n","642  CA_3_FOODS_3_694  1.0  9.0  kNNW      11.178571   \n","643  CA_3_FOODS_3_694  1.0  9.0   DTW      11.964286   \n","644  CA_3_FOODS_3_694  1.0  9.0   drf      11.464286   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","640                                                N/A       N/A   \n","641  {'max_depth': 8, 'min_samples_split': 32, 'n_e...   0.09863   \n","642                               {'n_neighbors': 128}  0.142466   \n","643           {'max_depth': 2, 'min_samples_split': 2}  0.082192   \n","644             {'min_node_size': 15, 'num_trees': 50}  0.120548   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","640  calendric,lag  0.10  \n","641  calendric,lag  0.10  \n","642  calendric,lag  0.10  \n","643  calendric,lag  0.10  \n","644  calendric,lag  0.10  \n","\n","[645 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_3_FOODS_3_714\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","645  CA_3_FOODS_3_714  1.0  9.0   SAA      14.464286   \n","646  CA_3_FOODS_3_714  1.0  9.0   RFW      14.535714   \n","647  CA_3_FOODS_3_714  1.0  9.0  kNNW      13.714286   \n","648  CA_3_FOODS_3_714  1.0  9.0   DTW      11.892857   \n","649  CA_3_FOODS_3_714  1.0  9.0   drf      12.338385   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","645                                                N/A       N/A   \n","646  {'max_depth': None, 'min_samples_split': 6, 'n... -0.004938   \n","647                                {'n_neighbors': 64}  0.051852   \n","648          {'max_depth': 4, 'min_samples_split': 64}  0.177778   \n","649             {'min_node_size': 15, 'num_trees': 50}  0.146976   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","645  calendric,lag  0.10  \n","646  calendric,lag  0.10  \n","647  calendric,lag  0.10  \n","648  calendric,lag  0.10  \n","649  calendric,lag  0.10  \n","\n","[650 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_080\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","650  CA_4_FOODS_3_080  1.0  9.0   SAA       6.821429   \n","651  CA_4_FOODS_3_080  1.0  9.0   RFW       5.642857   \n","652  CA_4_FOODS_3_080  1.0  9.0  kNNW       5.857143   \n","653  CA_4_FOODS_3_080  1.0  9.0   DTW       6.035714   \n","654  CA_4_FOODS_3_080  1.0  9.0   drf       6.178571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","650                                                N/A       N/A   \n","651  {'max_depth': 8, 'min_samples_split': 64, 'n_e...  0.172775   \n","652                               {'n_neighbors': 128}  0.141361   \n","653           {'max_depth': 2, 'min_samples_split': 2}  0.115183   \n","654             {'min_node_size': 15, 'num_trees': 50}  0.094241   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","650  calendric,lag  0.10  \n","651  calendric,lag  0.10  \n","652  calendric,lag  0.10  \n","653  calendric,lag  0.10  \n","654  calendric,lag  0.10  \n","\n","[655 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_226\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","655  CA_4_FOODS_3_226  1.0  9.0   SAA       3.678571   \n","656  CA_4_FOODS_3_226  1.0  9.0   RFW       3.714286   \n","657  CA_4_FOODS_3_226  1.0  9.0  kNNW       3.321429   \n","658  CA_4_FOODS_3_226  1.0  9.0   DTW       3.678571   \n","659  CA_4_FOODS_3_226  1.0  9.0   drf       3.321429   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","655                                                N/A       N/A   \n","656  {'max_depth': 10, 'min_samples_split': 8, 'n_e... -0.009709   \n","657                                {'n_neighbors': 64}  0.097087   \n","658           {'max_depth': 2, 'min_samples_split': 2}       0.0   \n","659             {'min_node_size': 15, 'num_trees': 50}  0.097087   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","655  calendric,lag  0.10  \n","656  calendric,lag  0.10  \n","657  calendric,lag  0.10  \n","658  calendric,lag  0.10  \n","659  calendric,lag  0.10  \n","\n","[660 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_228\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","660  CA_4_FOODS_3_228  1.0  9.0   SAA       3.321429   \n","661  CA_4_FOODS_3_228  1.0  9.0   RFW       3.285714   \n","662  CA_4_FOODS_3_228  1.0  9.0  kNNW       3.071429   \n","663  CA_4_FOODS_3_228  1.0  9.0   DTW       3.535714   \n","664  CA_4_FOODS_3_228  1.0  9.0   drf       3.071429   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","660                                                N/A       N/A   \n","661  {'max_depth': 10, 'min_samples_split': 64, 'n_...  0.010753   \n","662                               {'n_neighbors': 128}  0.075269   \n","663           {'max_depth': 2, 'min_samples_split': 2} -0.064516   \n","664             {'min_node_size': 15, 'num_trees': 50}  0.075269   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","660  calendric,lag  0.10  \n","661  calendric,lag  0.10  \n","662  calendric,lag  0.10  \n","663  calendric,lag  0.10  \n","664  calendric,lag  0.10  \n","\n","[665 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_252\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","665  CA_4_FOODS_3_252  1.0  9.0   SAA      17.678571   \n","666  CA_4_FOODS_3_252  1.0  9.0   RFW      13.285714   \n","667  CA_4_FOODS_3_252  1.0  9.0  kNNW      12.678571   \n","668  CA_4_FOODS_3_252  1.0  9.0   DTW      13.321429   \n","669  CA_4_FOODS_3_252  1.0  9.0   drf      13.107143   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","665                                                N/A       N/A   \n","666  {'max_depth': 8, 'min_samples_split': 4, 'n_es...  0.248485   \n","667                               {'n_neighbors': 128}  0.282828   \n","668           {'max_depth': 2, 'min_samples_split': 2}  0.246465   \n","669             {'min_node_size': 15, 'num_trees': 50}  0.258586   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","665  calendric,lag  0.10  \n","666  calendric,lag  0.10  \n","667  calendric,lag  0.10  \n","668  calendric,lag  0.10  \n","669  calendric,lag  0.10  \n","\n","[670 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_377\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","670  CA_4_FOODS_3_377  1.0  9.0   SAA       3.785714   \n","671  CA_4_FOODS_3_377  1.0  9.0   RFW       3.678571   \n","672  CA_4_FOODS_3_377  1.0  9.0  kNNW       4.035714   \n","673  CA_4_FOODS_3_377  1.0  9.0   DTW       3.714286   \n","674  CA_4_FOODS_3_377  1.0  9.0   drf       3.678571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","670                                                N/A       N/A   \n","671  {'max_depth': 10, 'min_samples_split': 32, 'n_...  0.028302   \n","672                               {'n_neighbors': 128} -0.066038   \n","673           {'max_depth': 2, 'min_samples_split': 2}  0.018868   \n","674             {'min_node_size': 15, 'num_trees': 50}  0.028302   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","670  calendric,lag  0.10  \n","671  calendric,lag  0.10  \n","672  calendric,lag  0.10  \n","673  calendric,lag  0.10  \n","674  calendric,lag  0.10  \n","\n","[675 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_555\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","675  CA_4_FOODS_3_555  1.0  9.0   SAA       7.607143   \n","676  CA_4_FOODS_3_555  1.0  9.0   RFW       7.571429   \n","677  CA_4_FOODS_3_555  1.0  9.0  kNNW       7.214286   \n","678  CA_4_FOODS_3_555  1.0  9.0   DTW       7.321429   \n","679  CA_4_FOODS_3_555  1.0  9.0   drf       7.347923   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","675                                                N/A       N/A   \n","676  {'max_depth': 10, 'min_samples_split': 64, 'n_...  0.004695   \n","677                                {'n_neighbors': 64}  0.051643   \n","678           {'max_depth': 2, 'min_samples_split': 2}  0.037559   \n","679             {'min_node_size': 15, 'num_trees': 50}  0.034076   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","675  calendric,lag  0.10  \n","676  calendric,lag  0.10  \n","677  calendric,lag  0.10  \n","678  calendric,lag  0.10  \n","679  calendric,lag  0.10  \n","\n","[680 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_586\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","680  CA_4_FOODS_3_586  1.0  9.0   SAA      13.607143   \n","681  CA_4_FOODS_3_586  1.0  9.0   RFW      10.357143   \n","682  CA_4_FOODS_3_586  1.0  9.0  kNNW      10.178571   \n","683  CA_4_FOODS_3_586  1.0  9.0   DTW      10.035714   \n","684  CA_4_FOODS_3_586  1.0  9.0   drf      10.321429   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","680                                                N/A       N/A   \n","681  {'max_depth': None, 'min_samples_split': 16, '...  0.238845   \n","682                               {'n_neighbors': 128}  0.251969   \n","683           {'max_depth': 2, 'min_samples_split': 2}  0.262467   \n","684             {'min_node_size': 15, 'num_trees': 50}   0.24147   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","680  calendric,lag  0.10  \n","681  calendric,lag  0.10  \n","682  calendric,lag  0.10  \n","683  calendric,lag  0.10  \n","684  calendric,lag  0.10  \n","\n","[685 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_668\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","685  CA_4_FOODS_3_668  1.0  9.0   SAA       3.642857   \n","686  CA_4_FOODS_3_668  1.0  9.0   RFW       3.892857   \n","687  CA_4_FOODS_3_668  1.0  9.0  kNNW       3.392857   \n","688  CA_4_FOODS_3_668  1.0  9.0   DTW       3.642857   \n","689  CA_4_FOODS_3_668  1.0  9.0   drf       3.714286   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","685                                                N/A       N/A   \n","686  {'max_depth': 4, 'min_samples_split': 64, 'n_e... -0.068627   \n","687                               {'n_neighbors': 128}  0.068627   \n","688           {'max_depth': 2, 'min_samples_split': 2}       0.0   \n","689             {'min_node_size': 15, 'num_trees': 50} -0.019608   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","685  calendric,lag  0.10  \n","686  calendric,lag  0.10  \n","687  calendric,lag  0.10  \n","688  calendric,lag  0.10  \n","689  calendric,lag  0.10  \n","\n","[690 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_694\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","690  CA_4_FOODS_3_694  1.0  9.0   SAA       3.892857   \n","691  CA_4_FOODS_3_694  1.0  9.0   RFW       3.892857   \n","692  CA_4_FOODS_3_694  1.0  9.0  kNNW       3.964286   \n","693  CA_4_FOODS_3_694  1.0  9.0   DTW       4.250000   \n","694  CA_4_FOODS_3_694  1.0  9.0   drf       3.928571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","690                                                N/A       N/A   \n","691  {'max_depth': 10, 'min_samples_split': 64, 'n_...       0.0   \n","692                               {'n_neighbors': 128} -0.018349   \n","693           {'max_depth': 2, 'min_samples_split': 2} -0.091743   \n","694             {'min_node_size': 15, 'num_trees': 50} -0.009174   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","690  calendric,lag  0.10  \n","691  calendric,lag  0.10  \n","692  calendric,lag  0.10  \n","693  calendric,lag  0.10  \n","694  calendric,lag  0.10  \n","\n","[695 rows x 9 columns]\n","Working on  für Szenario 1+2 : CA_4_FOODS_3_714\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","695  CA_4_FOODS_3_714  1.0  9.0   SAA       6.071429   \n","696  CA_4_FOODS_3_714  1.0  9.0   RFW       5.571429   \n","697  CA_4_FOODS_3_714  1.0  9.0  kNNW       6.357143   \n","698  CA_4_FOODS_3_714  1.0  9.0   DTW       7.071429   \n","699  CA_4_FOODS_3_714  1.0  9.0   drf       5.937250   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","695                                                N/A       N/A   \n","696  {'max_depth': 10, 'min_samples_split': 4, 'n_e...  0.082353   \n","697                                {'n_neighbors': 64} -0.047059   \n","698           {'max_depth': 2, 'min_samples_split': 2} -0.164706   \n","699             {'min_node_size': 15, 'num_trees': 50}    0.0221   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","695  calendric,lag  0.10  \n","696  calendric,lag  0.10  \n","697  calendric,lag  0.10  \n","698  calendric,lag  0.10  \n","699  calendric,lag  0.10  \n","\n","[700 rows x 9 columns]\n","Working on  für Szenario 1+2 : TX_1_FOODS_3_080\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","700  TX_1_FOODS_3_080  1.0  9.0   SAA       5.285714   \n","701  TX_1_FOODS_3_080  1.0  9.0   RFW       5.464286   \n","702  TX_1_FOODS_3_080  1.0  9.0  kNNW       5.571429   \n","703  TX_1_FOODS_3_080  1.0  9.0   DTW       5.357143   \n","704  TX_1_FOODS_3_080  1.0  9.0   drf       5.585019   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","700                                                N/A       N/A   \n","701  {'max_depth': 8, 'min_samples_split': 16, 'n_e... -0.033784   \n","702                               {'n_neighbors': 128} -0.054054   \n","703           {'max_depth': 2, 'min_samples_split': 2} -0.013514   \n","704             {'min_node_size': 15, 'num_trees': 50} -0.056625   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","700  calendric,lag  0.10  \n","701  calendric,lag  0.10  \n","702  calendric,lag  0.10  \n","703  calendric,lag  0.10  \n","704  calendric,lag  0.10  \n","\n","[705 rows x 9 columns]\n","Working on  für Szenario 1+2 : TX_1_FOODS_3_226\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","705  TX_1_FOODS_3_226  1.0  9.0   SAA      13.714286   \n","706  TX_1_FOODS_3_226  1.0  9.0   RFW      10.000000   \n","707  TX_1_FOODS_3_226  1.0  9.0  kNNW       8.642857   \n","708  TX_1_FOODS_3_226  1.0  9.0   DTW      10.285714   \n","709  TX_1_FOODS_3_226  1.0  9.0   drf       9.250056   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","705                                                N/A       N/A   \n","706  {'max_depth': 10, 'min_samples_split': 64, 'n_...  0.270833   \n","707                                {'n_neighbors': 16}  0.369792   \n","708           {'max_depth': 2, 'min_samples_split': 2}      0.25   \n","709             {'min_node_size': 15, 'num_trees': 50}  0.325517   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","705  calendric,lag  0.10  \n","706  calendric,lag  0.10  \n","707  calendric,lag  0.10  \n","708  calendric,lag  0.10  \n","709  calendric,lag  0.10  \n","\n","[710 rows x 9 columns]\n","Working on  für Szenario 1+2 : TX_1_FOODS_3_228\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","710  TX_1_FOODS_3_228  1.0  9.0   SAA       4.107143   \n","711  TX_1_FOODS_3_228  1.0  9.0   RFW       4.321429   \n","712  TX_1_FOODS_3_228  1.0  9.0  kNNW       4.035714   \n","713  TX_1_FOODS_3_228  1.0  9.0   DTW       4.392857   \n","714  TX_1_FOODS_3_228  1.0  9.0   drf       3.964286   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","710                                                N/A       N/A   \n","711  {'max_depth': 10, 'min_samples_split': 8, 'n_e... -0.052174   \n","712                                {'n_neighbors': 64}  0.017391   \n","713           {'max_depth': 2, 'min_samples_split': 2} -0.069565   \n","714             {'min_node_size': 15, 'num_trees': 50}  0.034783   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","710  calendric,lag  0.10  \n","711  calendric,lag  0.10  \n","712  calendric,lag  0.10  \n","713  calendric,lag  0.10  \n","714  calendric,lag  0.10  \n","\n","[715 rows x 9 columns]\n","Working on  für Szenario 1+2 : TX_1_FOODS_3_252\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","             Variable   cu   co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080  2.5  7.5   SAA      20.892857   \n","1    CA_1_FOODS_3_080  2.5  7.5   RFW      18.303571   \n","2    CA_1_FOODS_3_080  2.5  7.5  kNNW      20.714286   \n","3    CA_1_FOODS_3_080  2.5  7.5   DTW      20.000000   \n","4    CA_1_FOODS_3_080  2.5  7.5   drf      17.589286   \n","..                ...  ...  ...   ...            ...   \n","715  TX_1_FOODS_3_252  1.0  9.0   SAA      33.750000   \n","716  TX_1_FOODS_3_252  1.0  9.0   RFW      24.428571   \n","717  TX_1_FOODS_3_252  1.0  9.0  kNNW      21.607143   \n","718  TX_1_FOODS_3_252  1.0  9.0   DTW      25.928571   \n","719  TX_1_FOODS_3_252  1.0  9.0   drf      23.321429   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.123932   \n","2                                  {'n_neighbors': 16}  0.008547   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.042735   \n","4              {'min_node_size': 15, 'num_trees': 250}   0.15812   \n","..                                                 ...       ...   \n","715                                                N/A       N/A   \n","716  {'max_depth': None, 'min_samples_split': 16, '...   0.27619   \n","717                                {'n_neighbors': 64}  0.359788   \n","718          {'max_depth': 4, 'min_samples_split': 32}  0.231746   \n","719             {'min_node_size': 15, 'num_trees': 50}  0.308995   \n","\n","          features    sl  \n","0    calendric,lag  0.25  \n","1    calendric,lag  0.25  \n","2    calendric,lag  0.25  \n","3    calendric,lag  0.25  \n","4    calendric,lag  0.25  \n","..             ...   ...  \n","715  calendric,lag  0.10  \n","716  calendric,lag  0.10  \n","717  calendric,lag  0.10  \n","718  calendric,lag  0.10  \n","719  calendric,lag  0.10  \n","\n","[720 rows x 9 columns]\n","Working on  für Szenario 1+2 : TX_1_FOODS_3_377\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n","[0.9, 0.1]\n"]}]},{"cell_type":"markdown","source":["##Feature Variation"],"metadata":{"id":"Kn0eAm7tPnVX"}},{"cell_type":"code","source":["# Ignorieren von Warnungen\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","random.seed(0)\n","from IPython.core.display import display, HTML\n","param_combinations = [\n","    {'min_node_size': 10, 'num_trees': 50},\n","    {'min_node_size': 10, 'num_trees': 100},\n","    {'min_node_size': 10, 'num_trees': 250},\n","    {'min_node_size': 10, 'num_trees': 500},\n","    {'min_node_size': 10, 'num_trees': 1000},\n","    {'min_node_size': 15, 'num_trees': 50},\n","    {'min_node_size': 15, 'num_trees': 100},\n","    {'min_node_size': 15, 'num_trees': 250},\n","    {'min_node_size': 15, 'num_trees': 500},\n","    {'min_node_size': 15, 'num_trees': 1000},\n","    {'min_node_size': 25, 'num_trees': 50},\n","    {'min_node_size': 25, 'num_trees': 100},\n","    {'min_node_size': 25, 'num_trees': 250},\n","    {'min_node_size': 25, 'num_trees': 500},\n","    {'min_node_size': 25, 'num_trees': 1000},\n","    {'min_node_size': 50, 'num_trees': 50},\n","    {'min_node_size': 50, 'num_trees': 100},\n","    {'min_node_size': 50, 'num_trees': 250},\n","    {'min_node_size': 50, 'num_trees': 500},\n","    {'min_node_size': 50, 'num_trees': 1000},\n","]\n","\n","feature_names = ['Calendric', 'calendric_lag_special']\n","scaling_value_group = data.groupby('id', as_index=False)['scalingValue'].first()\n","\n","# Listen der zu testenden Werte für cu und co\n","combinations = [(9, 1)]\n","\n","table_rows = []  # Liste für die Tabellenzeilen\n","best_params_per_variable = {}\n","table_data_drf = []\n","\n","\n","# Schleife für alle Service Level\n","for cu, co in combinations:\n","    print(f\"Testing cu = {cu}, co = {co}\")\n","\n","\n","\n","    # Schleife für Szenario 3 : calendric, lag, und special Features jeweils einzeln\n","    if cu == 9 and co == 1:\n","\n","\n","        for column in y_train.columns:\n","            print(f\"Working on column für Szenario 3: {column}\")\n","\n","            #scaling factor je target\n","            scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","            # target auswahl\n","            X_train_cal = X_train_features.get_group(column)[calendric_features]\n","            X_train_cal_lag_spec = X_train_features.get_group(column)[calendric_lag_special_features]\n","            X_test_cal = X_test_features.get_group(column)[calendric_features]\n","            X_test_cal_lag_spec = X_test_features.get_group(column)[calendric_lag_special_features]\n","\n","            X_variation_pairs = [(X_train_cal, X_test_cal), (X_train_cal_lag_spec, X_test_cal_lag_spec)]\n","\n","            for i,  (X_train, X_test) in enumerate(X_variation_pairs):\n","\n","                feature_name = feature_names[i]  # Name des aktuellen Feature-Satzes\n","                print(f\"Testing cu = {cu}, co = {co}, Feature Name = {feature_name}\")\n","\n","                # SAA\n","                saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test.shape[0])\n","                costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","                # Random Forest Grid Search und Kosten\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","                    'n_estimators': [10, 20, 50, 100]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_RF = grid_search.best_params_\n","\n","                rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","                rfw_model.fit(X_train, y_train[column])\n","                rfw_predictions = rfw_model.predict(X_test)\n","                rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","                print(\"rfw fertig\")\n","                # kNNW\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","                param_grid = {\n","                    'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","                }\n","\n","                grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_kNNW = grid_search.best_params_\n","\n","                kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","                kNNW_model.fit(X_train, y_train[column])\n","                knWW_predict = kNNW_model.predict(X_test)\n","                kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","                # Weighted DT\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","                param_grid = {\n","                    'max_depth': [None, 2, 4, 6, 8, 10],\n","                    'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","                }\n","\n","                grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","                grid_search.fit(X_train, y_train[column])\n","                best_params_DTW = grid_search.best_params_\n","\n","                DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","                DTW_model.fit(X_train, y_train[column])\n","                DTW_prediction = DTW_model.predict(X_test)\n","                DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","                #drf Paramterbestimmung\n","\n","                best_average_costs = float('inf')\n","                best_params_drf = None\n","                # Schleife über alle Parameterkombinationen\n","                for param_combination in param_combinations:\n","                    min_node_size = param_combination['min_node_size']\n","                    num_trees = param_combination['num_trees']\n","\n","                    # Trainieren des Modells mit den aktuellen Parametern\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]\n","                    DRF.fit(X_train, target)\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    # Schleife über alle Testpunkte\n","                    for i in range(len(y_test)):\n","                        quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                        quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                        prediction = quantil_90[i]\n","\n","                        nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                        # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage > prediction:\n","                            unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                        else:\n","                            unterdeckungskosten = 0\n","\n","                        # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                        if nachfrage < prediction:\n","                            überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                        else:\n","                            überdeckungskosten = 0\n","\n","                        # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                        gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                        gesamtkosten_summe += gesamtkosten\n","\n","\n","                    # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","                    durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","                    # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","                    if durchschnittskosten_variable < best_average_costs:\n","                        best_average_costs = durchschnittskosten_variable\n","                        best_params_drf = param_combination\n","\n","                table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","                best_params_per_variable[column] = best_params_drf\n","                print(\"bestParam:\", best_params_drf)\n","                # berechnung der drf Kosten unter den jeweils besten Hyperparamter\n","                for variable, best_params_drf in best_params_per_variable.items():\n","                    min_node_size = best_params_drf['min_node_size']\n","                    num_trees = best_params_drf['num_trees']\n","\n","                    DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                    target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                    DRF.fit(X_train, y_train[column])\n","                    out = DRF.predict(newdata=X_test, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                    gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                    for i in range(len(y_test)):\n","                              quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                              quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                              prediction = quantil_90[i]\n","\n","                              nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                              # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage > prediction:\n","                                  unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                              else:\n","                                  unterdeckungskosten = 0\n","\n","                              # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                              if nachfrage < prediction:\n","                                  überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                              else:\n","                                  überdeckungskosten = 0\n","\n","                              # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                              gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                              gesamtkosten_summe += gesamtkosten\n","\n","                    durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_RFW     = 1-(rfw_score/costs_SAA)\n","                delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","                delta_DTW     = 1-(DTW_score/costs_SAA)\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","                table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, feature_name, cu/(cu+co)])\n","                table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, feature_name, cu/(cu+co)])\n","                result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","                print(result_table)\n","\n","\n","    \"\"\"\n","    # Schleife für Calender+Lag Features über alle Service Level\n","    for column in y_train.columns:\n","        print(f\"Working on  für Szenario 1+2 : {column}\")\n","        X_train_cal_lag = X_train_features.get_group(column)[calendric_lag_features]\n","        X_test_cal_lag = X_test_features.get_group(column)[calendric_lag_features]\n","\n","        scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","        # SAA\n","        SAA = SampleAverageApproximationNewsvendor(cu, co)\n","        SAA.fit(X_train_cal_lag, y_train[column])\n","        saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test_cal_lag.shape[0])\n","        costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","        # Random Forest Grid Search und Kosten\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","            'n_estimators': [10, 20, 50, 100]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_RF = grid_search.best_params_\n","\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","        rfw_model.fit(X_train_cal_lag, y_train[column])\n","        rfw_predictions = rfw_model.predict(X_test_cal_lag)\n","        rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","        # kNNW\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","        param_grid = {\n","            'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","        }\n","\n","        grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_kNNW = grid_search.best_params_\n","\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","        kNNW_model.fit(X_train_cal_lag, y_train[column])\n","        knWW_predict = kNNW_model.predict(X_test_cal_lag)\n","        kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","        # Weighted DT\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_DTW = grid_search.best_params_\n","\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","        DTW_model.fit(X_train_cal_lag, y_train[column])\n","        DTW_prediction = DTW_model.predict(X_test_cal_lag)\n","        DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","        #drf Hpyerparameter finden\n","        best_average_costs = float('inf')\n","        best_params_drf = None\n","\n","         # Schleife über alle Parameterkombinationen\n","        for param_combination in param_combinations:\n","            min_node_size = param_combination['min_node_size']\n","            num_trees = param_combination['num_trees']\n","\n","            # Trainieren des Modells mit den aktuellen Parametern\n","            DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","            target = y_train[column]\n","            DRF.fit(X_train_cal_lag, target)\n","            out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","            gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","            # Schleife über alle Testpunkte\n","            for i in range(len(y_test)):\n","                quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                prediction = quantil_90[i]\n","\n","                nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage > prediction:\n","                    unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                else:\n","                    unterdeckungskosten = 0\n","\n","                # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage < prediction:\n","                    überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                else:\n","                    überdeckungskosten = 0\n","\n","                # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                gesamtkosten_summe += gesamtkosten\n","\n","\n","            # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","            durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","            # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","            if durchschnittskosten_variable < best_average_costs:\n","                best_average_costs = durchschnittskosten_variable\n","                best_params_drf = param_combination\n","        table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","        best_params_per_variable[column] = best_params_drf\n","\n","        for variable, best_params_drf in best_params_per_variable.items():\n","                min_node_size = best_params_drf['min_node_size']\n","                num_trees = best_params_drf['num_trees']\n","\n","                # Trainieren des Modells mit den besten Parametern auf dem gesamten Datensatz\n","                DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                DRF.fit(X_train_cal_lag, y_train[column])\n","                out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                # Schleife über alle Testpunkte\n","                for i in range(len(y_test)):\n","                    quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                    quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                    prediction = quantil_90[i]\n","\n","                    nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                    # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage > prediction:\n","                        unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                    else:\n","                        unterdeckungskosten = 0\n","\n","                    # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage < prediction:\n","                        überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                    else:\n","                        überdeckungskosten = 0\n","\n","                    # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                    gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                    gesamtkosten_summe += gesamtkosten\n","\n","                durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","                # Füge die Ergebnisse und besten Hyperparameter der aktuellen Spalte zur Tabelle hinzu\n","\n","        delta_RFW     = 1-(rfw_score/costs_SAA)\n","        delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","        delta_DTW     = 1-(DTW_score/costs_SAA)\n","        delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","        table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, \"calendric,lag\", cu/(cu+co)])\n","        result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","        print(result_table)\n","            \"\"\"\n","\n","# Erstelle die Ergebnis-Tabelle\n","result_table_M5 = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","\n","# Drucke die Ergebnis-Tabelle\n","print(\"Results Table:\")\n","print(result_table_M5)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"359_GPTEPtk2","executionInfo":{"status":"ok","timestamp":1696052039425,"user_tz":-120,"elapsed":20348846,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"a712ea37-3922-44c9-b8d4-e140864acf06"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43mDie letzten 5000 Zeilen der Streamingausgabe wurden abgeschnitten.\u001b[0m\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","840  WI_2_FOODS_3_377   9   1   SAA       7.178571   \n","841  WI_2_FOODS_3_377   9   1   RFW       7.178571   \n","842  WI_2_FOODS_3_377   9   1  kNNW       6.821429   \n","843  WI_2_FOODS_3_377   9   1   DTW       7.821429   \n","844  WI_2_FOODS_3_377   9   1   drf       7.087364   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","840                                                N/A       N/A  Calendric   \n","841  {'max_depth': None, 'min_samples_split': 16, '...       0.0  Calendric   \n","842                               {'n_neighbors': 128}  0.049751  Calendric   \n","843           {'max_depth': 2, 'min_samples_split': 2} -0.089552  Calendric   \n","844            {'min_node_size': 10, 'num_trees': 100}  0.012706  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","840  0.9  \n","841  0.9  \n","842  0.9  \n","843  0.9  \n","844  0.9  \n","\n","[845 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 25, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","845  WI_2_FOODS_3_377   9   1   SAA       7.178571   \n","846  WI_2_FOODS_3_377   9   1   RFW       7.500000   \n","847  WI_2_FOODS_3_377   9   1  kNNW       7.714286   \n","848  WI_2_FOODS_3_377   9   1   DTW       8.178571   \n","849  WI_2_FOODS_3_377   9   1   drf       6.928571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","845                                                N/A       N/A   \n","846  {'max_depth': None, 'min_samples_split': 64, '... -0.044776   \n","847                                {'n_neighbors': 64} -0.074627   \n","848          {'max_depth': 4, 'min_samples_split': 64} -0.139303   \n","849           {'min_node_size': 25, 'num_trees': 1000}  0.034826   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","845  calendric_lag_special  0.9  \n","846  calendric_lag_special  0.9  \n","847  calendric_lag_special  0.9  \n","848  calendric_lag_special  0.9  \n","849  calendric_lag_special  0.9  \n","\n","[850 rows x 9 columns]\n","Working on column für Szenario 3: WI_2_FOODS_3_555\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","850  WI_2_FOODS_3_555   9   1   SAA      20.714286   \n","851  WI_2_FOODS_3_555   9   1   RFW      16.785714   \n","852  WI_2_FOODS_3_555   9   1  kNNW      15.107143   \n","853  WI_2_FOODS_3_555   9   1   DTW      16.500000   \n","854  WI_2_FOODS_3_555   9   1   drf      15.436383   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","850                                                N/A       N/A  Calendric   \n","851  {'max_depth': None, 'min_samples_split': 32, '...  0.189655  Calendric   \n","852                               {'n_neighbors': 128}   0.27069  Calendric   \n","853          {'max_depth': 8, 'min_samples_split': 16}  0.203448  Calendric   \n","854           {'min_node_size': 10, 'num_trees': 1000}  0.254795  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","850  0.9  \n","851  0.9  \n","852  0.9  \n","853  0.9  \n","854  0.9  \n","\n","[855 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","855  WI_2_FOODS_3_555   9   1   SAA      20.714286   \n","856  WI_2_FOODS_3_555   9   1   RFW      17.250000   \n","857  WI_2_FOODS_3_555   9   1  kNNW      17.142857   \n","858  WI_2_FOODS_3_555   9   1   DTW      16.500000   \n","859  WI_2_FOODS_3_555   9   1   drf      16.761629   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","855                                                N/A       N/A   \n","856  {'max_depth': None, 'min_samples_split': 16, '...  0.167241   \n","857                                {'n_neighbors': 64}  0.172414   \n","858           {'max_depth': 4, 'min_samples_split': 2}  0.203448   \n","859             {'min_node_size': 10, 'num_trees': 50}  0.190818   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","855  calendric_lag_special  0.9  \n","856  calendric_lag_special  0.9  \n","857  calendric_lag_special  0.9  \n","858  calendric_lag_special  0.9  \n","859  calendric_lag_special  0.9  \n","\n","[860 rows x 9 columns]\n","Working on column für Szenario 3: WI_2_FOODS_3_586\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","860  WI_2_FOODS_3_586   9   1   SAA       7.964286   \n","861  WI_2_FOODS_3_586   9   1   RFW       8.035714   \n","862  WI_2_FOODS_3_586   9   1  kNNW       7.892857   \n","863  WI_2_FOODS_3_586   9   1   DTW       8.821429   \n","864  WI_2_FOODS_3_586   9   1   drf       7.821429   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","860                                                N/A       N/A  Calendric   \n","861  {'max_depth': 10, 'min_samples_split': 2, 'n_e... -0.008969  Calendric   \n","862                               {'n_neighbors': 128}  0.008969  Calendric   \n","863          {'max_depth': 6, 'min_samples_split': 64} -0.107623  Calendric   \n","864            {'min_node_size': 10, 'num_trees': 500}  0.017937  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","860  0.9  \n","861  0.9  \n","862  0.9  \n","863  0.9  \n","864  0.9  \n","\n","[865 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","865  WI_2_FOODS_3_586   9   1   SAA       7.964286   \n","866  WI_2_FOODS_3_586   9   1   RFW       8.142857   \n","867  WI_2_FOODS_3_586   9   1  kNNW       7.928571   \n","868  WI_2_FOODS_3_586   9   1   DTW       8.535714   \n","869  WI_2_FOODS_3_586   9   1   drf       8.187192   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","865                                                N/A       N/A   \n","866  {'max_depth': 10, 'min_samples_split': 32, 'n_... -0.022422   \n","867                               {'n_neighbors': 128}  0.004484   \n","868          {'max_depth': 4, 'min_samples_split': 16} -0.071749   \n","869             {'min_node_size': 10, 'num_trees': 50} -0.027988   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","865  calendric_lag_special  0.9  \n","866  calendric_lag_special  0.9  \n","867  calendric_lag_special  0.9  \n","868  calendric_lag_special  0.9  \n","869  calendric_lag_special  0.9  \n","\n","[870 rows x 9 columns]\n","Working on column für Szenario 3: WI_2_FOODS_3_668\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","870  WI_2_FOODS_3_668   9   1   SAA       5.964286   \n","871  WI_2_FOODS_3_668   9   1   RFW       6.178571   \n","872  WI_2_FOODS_3_668   9   1  kNNW       5.964286   \n","873  WI_2_FOODS_3_668   9   1   DTW       5.464286   \n","874  WI_2_FOODS_3_668   9   1   drf       5.178571   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","870                                                N/A       N/A  Calendric   \n","871  {'max_depth': None, 'min_samples_split': 32, '... -0.035928  Calendric   \n","872                                {'n_neighbors': 64}       0.0  Calendric   \n","873          {'max_depth': 6, 'min_samples_split': 32}  0.083832  Calendric   \n","874           {'min_node_size': 10, 'num_trees': 1000}  0.131737  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","870  0.9  \n","871  0.9  \n","872  0.9  \n","873  0.9  \n","874  0.9  \n","\n","[875 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","875  WI_2_FOODS_3_668   9   1   SAA       5.964286   \n","876  WI_2_FOODS_3_668   9   1   RFW       5.785714   \n","877  WI_2_FOODS_3_668   9   1  kNNW       5.678571   \n","878  WI_2_FOODS_3_668   9   1   DTW       5.964286   \n","879  WI_2_FOODS_3_668   9   1   drf       5.229635   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","875                                                N/A       N/A   \n","876  {'max_depth': 8, 'min_samples_split': 32, 'n_e...   0.02994   \n","877                               {'n_neighbors': 128}  0.047904   \n","878           {'max_depth': 2, 'min_samples_split': 2}       0.0   \n","879           {'min_node_size': 10, 'num_trees': 1000}  0.123175   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","875  calendric_lag_special  0.9  \n","876  calendric_lag_special  0.9  \n","877  calendric_lag_special  0.9  \n","878  calendric_lag_special  0.9  \n","879  calendric_lag_special  0.9  \n","\n","[880 rows x 9 columns]\n","Working on column für Szenario 3: WI_2_FOODS_3_694\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","880  WI_2_FOODS_3_694   9   1   SAA      18.857143   \n","881  WI_2_FOODS_3_694   9   1   RFW      17.821429   \n","882  WI_2_FOODS_3_694   9   1  kNNW      23.000000   \n","883  WI_2_FOODS_3_694   9   1   DTW      17.357143   \n","884  WI_2_FOODS_3_694   9   1   drf      16.644052   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","880                                                N/A       N/A  Calendric   \n","881  {'max_depth': None, 'min_samples_split': 32, '...  0.054924  Calendric   \n","882                                {'n_neighbors': 64} -0.219697  Calendric   \n","883           {'max_depth': 2, 'min_samples_split': 2}  0.079545  Calendric   \n","884            {'min_node_size': 15, 'num_trees': 500}  0.117361  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","880  0.9  \n","881  0.9  \n","882  0.9  \n","883  0.9  \n","884  0.9  \n","\n","[885 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","885  WI_2_FOODS_3_694   9   1   SAA      18.857143   \n","886  WI_2_FOODS_3_694   9   1   RFW      17.750000   \n","887  WI_2_FOODS_3_694   9   1  kNNW      17.285714   \n","888  WI_2_FOODS_3_694   9   1   DTW      21.178571   \n","889  WI_2_FOODS_3_694   9   1   drf      17.337652   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","885                                                N/A       N/A   \n","886  {'max_depth': None, 'min_samples_split': 16, '...  0.058712   \n","887                               {'n_neighbors': 128}  0.083333   \n","888           {'max_depth': 4, 'min_samples_split': 2} -0.123106   \n","889            {'min_node_size': 10, 'num_trees': 100}  0.080579   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","885  calendric_lag_special  0.9  \n","886  calendric_lag_special  0.9  \n","887  calendric_lag_special  0.9  \n","888  calendric_lag_special  0.9  \n","889  calendric_lag_special  0.9  \n","\n","[890 rows x 9 columns]\n","Working on column für Szenario 3: WI_2_FOODS_3_714\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","890  WI_2_FOODS_3_714   9   1   SAA      30.285714   \n","891  WI_2_FOODS_3_714   9   1   RFW      24.785714   \n","892  WI_2_FOODS_3_714   9   1  kNNW      28.571429   \n","893  WI_2_FOODS_3_714   9   1   DTW      40.214286   \n","894  WI_2_FOODS_3_714   9   1   drf      16.969369   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","890                                                N/A       N/A  Calendric   \n","891  {'max_depth': None, 'min_samples_split': 16, '...  0.181604  Calendric   \n","892                                {'n_neighbors': 64}  0.056604  Calendric   \n","893          {'max_depth': 6, 'min_samples_split': 32}  -0.32783  Calendric   \n","894            {'min_node_size': 10, 'num_trees': 500}  0.439691  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","890  0.9  \n","891  0.9  \n","892  0.9  \n","893  0.9  \n","894  0.9  \n","\n","[895 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","895  WI_2_FOODS_3_714   9   1   SAA      30.285714   \n","896  WI_2_FOODS_3_714   9   1   RFW      17.928571   \n","897  WI_2_FOODS_3_714   9   1  kNNW      16.892857   \n","898  WI_2_FOODS_3_714   9   1   DTW      23.357143   \n","899  WI_2_FOODS_3_714   9   1   drf      17.071835   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","895                                                N/A       N/A   \n","896  {'max_depth': 10, 'min_samples_split': 32, 'n_...  0.408019   \n","897                               {'n_neighbors': 128}  0.442217   \n","898          {'max_depth': 4, 'min_samples_split': 16}  0.228774   \n","899            {'min_node_size': 50, 'num_trees': 100}  0.436307   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","895  calendric_lag_special  0.9  \n","896  calendric_lag_special  0.9  \n","897  calendric_lag_special  0.9  \n","898  calendric_lag_special  0.9  \n","899  calendric_lag_special  0.9  \n","\n","[900 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_080\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","900  WI_3_FOODS_3_080   9   1   SAA      13.214286   \n","901  WI_3_FOODS_3_080   9   1   RFW      11.392857   \n","902  WI_3_FOODS_3_080   9   1  kNNW      14.071429   \n","903  WI_3_FOODS_3_080   9   1   DTW       6.714286   \n","904  WI_3_FOODS_3_080   9   1   drf       4.939549   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","900                                                N/A       N/A  Calendric   \n","901  {'max_depth': None, 'min_samples_split': 16, '...  0.137838  Calendric   \n","902                                {'n_neighbors': 64} -0.064865  Calendric   \n","903          {'max_depth': 4, 'min_samples_split': 32}  0.491892  Calendric   \n","904            {'min_node_size': 15, 'num_trees': 250}  0.626196  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","900  0.9  \n","901  0.9  \n","902  0.9  \n","903  0.9  \n","904  0.9  \n","\n","[905 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 25, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","905  WI_3_FOODS_3_080   9   1   SAA      13.214286   \n","906  WI_3_FOODS_3_080   9   1   RFW       6.142857   \n","907  WI_3_FOODS_3_080   9   1  kNNW       6.357143   \n","908  WI_3_FOODS_3_080   9   1   DTW       6.678571   \n","909  WI_3_FOODS_3_080   9   1   drf       5.892857   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","905                                                N/A       N/A   \n","906  {'max_depth': 10, 'min_samples_split': 32, 'n_...  0.535135   \n","907                                {'n_neighbors': 64}  0.518919   \n","908          {'max_depth': 4, 'min_samples_split': 32}  0.494595   \n","909            {'min_node_size': 25, 'num_trees': 100}  0.554054   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","905  calendric_lag_special  0.9  \n","906  calendric_lag_special  0.9  \n","907  calendric_lag_special  0.9  \n","908  calendric_lag_special  0.9  \n","909  calendric_lag_special  0.9  \n","\n","[910 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_226\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","910  WI_3_FOODS_3_226   9   1   SAA      31.785714   \n","911  WI_3_FOODS_3_226   9   1   RFW      25.607143   \n","912  WI_3_FOODS_3_226   9   1  kNNW      29.464286   \n","913  WI_3_FOODS_3_226   9   1   DTW      32.500000   \n","914  WI_3_FOODS_3_226   9   1   drf      24.178571   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","910                                                N/A       N/A  Calendric   \n","911  {'max_depth': None, 'min_samples_split': 16, '...  0.194382  Calendric   \n","912                                {'n_neighbors': 64}  0.073034  Calendric   \n","913           {'max_depth': 2, 'min_samples_split': 2} -0.022472  Calendric   \n","914             {'min_node_size': 50, 'num_trees': 50}  0.239326  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","910  0.9  \n","911  0.9  \n","912  0.9  \n","913  0.9  \n","914  0.9  \n","\n","[915 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","915  WI_3_FOODS_3_226   9   1   SAA      31.785714   \n","916  WI_3_FOODS_3_226   9   1   RFW      29.250000   \n","917  WI_3_FOODS_3_226   9   1  kNNW      27.392857   \n","918  WI_3_FOODS_3_226   9   1   DTW      29.321429   \n","919  WI_3_FOODS_3_226   9   1   drf      27.268853   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","915                                                N/A       N/A   \n","916  {'max_depth': None, 'min_samples_split': 32, '...  0.079775   \n","917                                {'n_neighbors': 64}  0.138202   \n","918          {'max_depth': 4, 'min_samples_split': 64}  0.077528   \n","919            {'min_node_size': 50, 'num_trees': 500}  0.142104   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","915  calendric_lag_special  0.9  \n","916  calendric_lag_special  0.9  \n","917  calendric_lag_special  0.9  \n","918  calendric_lag_special  0.9  \n","919  calendric_lag_special  0.9  \n","\n","[920 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_228\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","920  WI_3_FOODS_3_228   9   1   SAA       7.214286   \n","921  WI_3_FOODS_3_228   9   1   RFW       6.892857   \n","922  WI_3_FOODS_3_228   9   1  kNNW       8.321429   \n","923  WI_3_FOODS_3_228   9   1   DTW       4.785714   \n","924  WI_3_FOODS_3_228   9   1   drf       4.428571   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","920                                                N/A       N/A  Calendric   \n","921  {'max_depth': None, 'min_samples_split': 16, '...  0.044554  Calendric   \n","922                                {'n_neighbors': 64} -0.153465  Calendric   \n","923          {'max_depth': 4, 'min_samples_split': 32}  0.336634  Calendric   \n","924           {'min_node_size': 10, 'num_trees': 1000}  0.386139  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","920  0.9  \n","921  0.9  \n","922  0.9  \n","923  0.9  \n","924  0.9  \n","\n","[925 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","925  WI_3_FOODS_3_228   9   1   SAA       7.214286   \n","926  WI_3_FOODS_3_228   9   1   RFW       4.821429   \n","927  WI_3_FOODS_3_228   9   1  kNNW       5.250000   \n","928  WI_3_FOODS_3_228   9   1   DTW       4.892857   \n","929  WI_3_FOODS_3_228   9   1   drf       4.678571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","925                                                N/A       N/A   \n","926  {'max_depth': None, 'min_samples_split': 16, '...  0.331683   \n","927                               {'n_neighbors': 128}  0.272277   \n","928          {'max_depth': 4, 'min_samples_split': 64}  0.321782   \n","929             {'min_node_size': 10, 'num_trees': 50}  0.351485   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","925  calendric_lag_special  0.9  \n","926  calendric_lag_special  0.9  \n","927  calendric_lag_special  0.9  \n","928  calendric_lag_special  0.9  \n","929  calendric_lag_special  0.9  \n","\n","[930 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_252\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","930  WI_3_FOODS_3_252   9   1   SAA      24.000000   \n","931  WI_3_FOODS_3_252   9   1   RFW      26.214286   \n","932  WI_3_FOODS_3_252   9   1  kNNW      17.571429   \n","933  WI_3_FOODS_3_252   9   1   DTW      38.285714   \n","934  WI_3_FOODS_3_252   9   1   drf      30.285714   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","930                                                N/A       N/A  Calendric   \n","931  {'max_depth': None, 'min_samples_split': 4, 'n... -0.092262  Calendric   \n","932                                {'n_neighbors': 64}  0.267857  Calendric   \n","933          {'max_depth': 4, 'min_samples_split': 32} -0.595238  Calendric   \n","934             {'min_node_size': 50, 'num_trees': 50} -0.261905  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","930  0.9  \n","931  0.9  \n","932  0.9  \n","933  0.9  \n","934  0.9  \n","\n","[935 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","935  WI_3_FOODS_3_252   9   1   SAA      24.000000   \n","936  WI_3_FOODS_3_252   9   1   RFW      21.250000   \n","937  WI_3_FOODS_3_252   9   1  kNNW      19.928571   \n","938  WI_3_FOODS_3_252   9   1   DTW      24.928571   \n","939  WI_3_FOODS_3_252   9   1   drf      19.955954   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","935                                                N/A       N/A   \n","936  {'max_depth': None, 'min_samples_split': 64, '...  0.114583   \n","937                               {'n_neighbors': 128}  0.169643   \n","938           {'max_depth': 2, 'min_samples_split': 2}  -0.03869   \n","939            {'min_node_size': 50, 'num_trees': 250}  0.168502   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","935  calendric_lag_special  0.9  \n","936  calendric_lag_special  0.9  \n","937  calendric_lag_special  0.9  \n","938  calendric_lag_special  0.9  \n","939  calendric_lag_special  0.9  \n","\n","[940 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_377\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","940  WI_3_FOODS_3_377   9   1   SAA      11.535714   \n","941  WI_3_FOODS_3_377   9   1   RFW       9.357143   \n","942  WI_3_FOODS_3_377   9   1  kNNW      15.392857   \n","943  WI_3_FOODS_3_377   9   1   DTW       6.607143   \n","944  WI_3_FOODS_3_377   9   1   drf       5.535714   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","940                                                N/A       N/A  Calendric   \n","941  {'max_depth': None, 'min_samples_split': 8, 'n...  0.188854  Calendric   \n","942                                {'n_neighbors': 16} -0.334365  Calendric   \n","943           {'max_depth': 2, 'min_samples_split': 2}  0.427245  Calendric   \n","944             {'min_node_size': 10, 'num_trees': 50}  0.520124  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","940  0.9  \n","941  0.9  \n","942  0.9  \n","943  0.9  \n","944  0.9  \n","\n","[945 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","945  WI_3_FOODS_3_377   9   1   SAA      11.535714   \n","946  WI_3_FOODS_3_377   9   1   RFW       6.714286   \n","947  WI_3_FOODS_3_377   9   1  kNNW       5.892857   \n","948  WI_3_FOODS_3_377   9   1   DTW       6.607143   \n","949  WI_3_FOODS_3_377   9   1   drf       5.714286   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","945                                                N/A       N/A   \n","946  {'max_depth': 10, 'min_samples_split': 4, 'n_e...  0.417957   \n","947                                {'n_neighbors': 64}  0.489164   \n","948           {'max_depth': 2, 'min_samples_split': 2}  0.427245   \n","949            {'min_node_size': 50, 'num_trees': 100}  0.504644   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","945  calendric_lag_special  0.9  \n","946  calendric_lag_special  0.9  \n","947  calendric_lag_special  0.9  \n","948  calendric_lag_special  0.9  \n","949  calendric_lag_special  0.9  \n","\n","[950 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_555\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","950  WI_3_FOODS_3_555   9   1   SAA      23.321429   \n","951  WI_3_FOODS_3_555   9   1   RFW      16.214286   \n","952  WI_3_FOODS_3_555   9   1  kNNW      22.000000   \n","953  WI_3_FOODS_3_555   9   1   DTW      21.250000   \n","954  WI_3_FOODS_3_555   9   1   drf      15.642857   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","950                                                N/A       N/A  Calendric   \n","951  {'max_depth': None, 'min_samples_split': 8, 'n...  0.304747  Calendric   \n","952                                {'n_neighbors': 64}  0.056662  Calendric   \n","953          {'max_depth': 6, 'min_samples_split': 64}  0.088821  Calendric   \n","954            {'min_node_size': 50, 'num_trees': 100}   0.32925  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","950  0.9  \n","951  0.9  \n","952  0.9  \n","953  0.9  \n","954  0.9  \n","\n","[955 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","955  WI_3_FOODS_3_555   9   1   SAA      23.321429   \n","956  WI_3_FOODS_3_555   9   1   RFW      14.714286   \n","957  WI_3_FOODS_3_555   9   1  kNNW      15.321429   \n","958  WI_3_FOODS_3_555   9   1   DTW      20.392857   \n","959  WI_3_FOODS_3_555   9   1   drf      14.552166   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","955                                                N/A       N/A   \n","956  {'max_depth': None, 'min_samples_split': 32, '...  0.369066   \n","957                                {'n_neighbors': 64}  0.343032   \n","958           {'max_depth': 4, 'min_samples_split': 2}  0.125574   \n","959            {'min_node_size': 15, 'num_trees': 250}  0.376017   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","955  calendric_lag_special  0.9  \n","956  calendric_lag_special  0.9  \n","957  calendric_lag_special  0.9  \n","958  calendric_lag_special  0.9  \n","959  calendric_lag_special  0.9  \n","\n","[960 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_586\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 250}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","960  WI_3_FOODS_3_586   9   1   SAA      38.821429   \n","961  WI_3_FOODS_3_586   9   1   RFW      26.250000   \n","962  WI_3_FOODS_3_586   9   1  kNNW      38.642857   \n","963  WI_3_FOODS_3_586   9   1   DTW      19.607143   \n","964  WI_3_FOODS_3_586   9   1   drf      16.892857   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","960                                                N/A       N/A  Calendric   \n","961  {'max_depth': None, 'min_samples_split': 8, 'n...  0.323827  Calendric   \n","962                                {'n_neighbors': 64}    0.0046  Calendric   \n","963          {'max_depth': 6, 'min_samples_split': 32}   0.49494  Calendric   \n","964            {'min_node_size': 50, 'num_trees': 250}  0.564857  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","960  0.9  \n","961  0.9  \n","962  0.9  \n","963  0.9  \n","964  0.9  \n","\n","[965 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 100}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","965  WI_3_FOODS_3_586   9   1   SAA      38.821429   \n","966  WI_3_FOODS_3_586   9   1   RFW      22.285714   \n","967  WI_3_FOODS_3_586   9   1  kNNW      22.178571   \n","968  WI_3_FOODS_3_586   9   1   DTW      17.892857   \n","969  WI_3_FOODS_3_586   9   1   drf      18.107143   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","965                                                N/A       N/A   \n","966  {'max_depth': None, 'min_samples_split': 16, '...  0.425943   \n","967                                {'n_neighbors': 64}  0.428703   \n","968          {'max_depth': 6, 'min_samples_split': 64}  0.539098   \n","969            {'min_node_size': 10, 'num_trees': 100}  0.533579   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","965  calendric_lag_special  0.9  \n","966  calendric_lag_special  0.9  \n","967  calendric_lag_special  0.9  \n","968  calendric_lag_special  0.9  \n","969  calendric_lag_special  0.9  \n","\n","[970 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_668\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","970  WI_3_FOODS_3_668   9   1   SAA       7.678571   \n","971  WI_3_FOODS_3_668   9   1   RFW       7.892857   \n","972  WI_3_FOODS_3_668   9   1  kNNW       8.107143   \n","973  WI_3_FOODS_3_668   9   1   DTW       7.678571   \n","974  WI_3_FOODS_3_668   9   1   drf       7.285714   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","970                                                N/A       N/A  Calendric   \n","971  {'max_depth': None, 'min_samples_split': 16, '... -0.027907  Calendric   \n","972                                {'n_neighbors': 64} -0.055814  Calendric   \n","973          {'max_depth': 4, 'min_samples_split': 64}      -0.0  Calendric   \n","974            {'min_node_size': 10, 'num_trees': 500}  0.051163  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","970  0.9  \n","971  0.9  \n","972  0.9  \n","973  0.9  \n","974  0.9  \n","\n","[975 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","975  WI_3_FOODS_3_668   9   1   SAA       7.678571   \n","976  WI_3_FOODS_3_668   9   1   RFW       7.178571   \n","977  WI_3_FOODS_3_668   9   1  kNNW       8.464286   \n","978  WI_3_FOODS_3_668   9   1   DTW       7.035714   \n","979  WI_3_FOODS_3_668   9   1   drf       6.928571   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","975                                                N/A       N/A   \n","976  {'max_depth': 10, 'min_samples_split': 8, 'n_e...  0.065116   \n","977                               {'n_neighbors': 128} -0.102326   \n","978          {'max_depth': 4, 'min_samples_split': 32}  0.083721   \n","979           {'min_node_size': 50, 'num_trees': 1000}  0.097674   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","975  calendric_lag_special  0.9  \n","976  calendric_lag_special  0.9  \n","977  calendric_lag_special  0.9  \n","978  calendric_lag_special  0.9  \n","979  calendric_lag_special  0.9  \n","\n","[980 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_694\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 500}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","980  WI_3_FOODS_3_694   9   1   SAA      25.750000   \n","981  WI_3_FOODS_3_694   9   1   RFW      21.821429   \n","982  WI_3_FOODS_3_694   9   1  kNNW      23.250000   \n","983  WI_3_FOODS_3_694   9   1   DTW      19.750000   \n","984  WI_3_FOODS_3_694   9   1   drf      19.535714   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","980                                                N/A       N/A  Calendric   \n","981  {'max_depth': None, 'min_samples_split': 32, '...  0.152566  Calendric   \n","982                                {'n_neighbors': 64}  0.097087  Calendric   \n","983          {'max_depth': 4, 'min_samples_split': 64}   0.23301  Calendric   \n","984            {'min_node_size': 10, 'num_trees': 500}  0.241331  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","980  0.9  \n","981  0.9  \n","982  0.9  \n","983  0.9  \n","984  0.9  \n","\n","[985 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 10, 'num_trees': 1000}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","985  WI_3_FOODS_3_694   9   1   SAA      25.750000   \n","986  WI_3_FOODS_3_694   9   1   RFW      22.178571   \n","987  WI_3_FOODS_3_694   9   1  kNNW      20.321429   \n","988  WI_3_FOODS_3_694   9   1   DTW      18.428571   \n","989  WI_3_FOODS_3_694   9   1   drf      19.024108   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","985                                                N/A       N/A   \n","986  {'max_depth': None, 'min_samples_split': 32, '...  0.138696   \n","987                                {'n_neighbors': 64}  0.210818   \n","988          {'max_depth': 4, 'min_samples_split': 64}  0.284327   \n","989           {'min_node_size': 10, 'num_trees': 1000}    0.2612   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","985  calendric_lag_special  0.9  \n","986  calendric_lag_special  0.9  \n","987  calendric_lag_special  0.9  \n","988  calendric_lag_special  0.9  \n","989  calendric_lag_special  0.9  \n","\n","[990 rows x 9 columns]\n","Working on column für Szenario 3: WI_3_FOODS_3_714\n","Testing cu = 9, co = 1, Feature Name = Calendric\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 15, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","990  WI_3_FOODS_3_714   9   1   SAA      16.678571   \n","991  WI_3_FOODS_3_714   9   1   RFW      19.000000   \n","992  WI_3_FOODS_3_714   9   1  kNNW      21.428571   \n","993  WI_3_FOODS_3_714   9   1   DTW      26.178571   \n","994  WI_3_FOODS_3_714   9   1   drf      16.714286   \n","\n","                                           Best Params   delta C   features  \\\n","0                                                  N/A       N/A  Calendric   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989  Calendric   \n","2                                  {'n_neighbors': 64}  0.025862  Calendric   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448  Calendric   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908  Calendric   \n","..                                                 ...       ...        ...   \n","990                                                N/A       N/A  Calendric   \n","991  {'max_depth': None, 'min_samples_split': 16, '... -0.139186  Calendric   \n","992                                {'n_neighbors': 64} -0.284797  Calendric   \n","993           {'max_depth': 6, 'min_samples_split': 2} -0.569593  Calendric   \n","994             {'min_node_size': 15, 'num_trees': 50} -0.002141  Calendric   \n","\n","      sl  \n","0    0.9  \n","1    0.9  \n","2    0.9  \n","3    0.9  \n","4    0.9  \n","..   ...  \n","990  0.9  \n","991  0.9  \n","992  0.9  \n","993  0.9  \n","994  0.9  \n","\n","[995 rows x 9 columns]\n","Testing cu = 9, co = 1, Feature Name = calendric_lag_special\n","rfw fertig\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","bestParam: {'min_node_size': 50, 'num_trees': 50}\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","995  WI_3_FOODS_3_714   9   1   SAA      16.678571   \n","996  WI_3_FOODS_3_714   9   1   RFW      14.607143   \n","997  WI_3_FOODS_3_714   9   1  kNNW      17.892857   \n","998  WI_3_FOODS_3_714   9   1   DTW      16.500000   \n","999  WI_3_FOODS_3_714   9   1   drf      15.125933   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","995                                                N/A       N/A   \n","996  {'max_depth': None, 'min_samples_split': 32, '...  0.124197   \n","997                                {'n_neighbors': 64} -0.072805   \n","998          {'max_depth': 4, 'min_samples_split': 64}  0.010707   \n","999             {'min_node_size': 50, 'num_trees': 50}  0.093092   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","995  calendric_lag_special  0.9  \n","996  calendric_lag_special  0.9  \n","997  calendric_lag_special  0.9  \n","998  calendric_lag_special  0.9  \n","999  calendric_lag_special  0.9  \n","\n","[1000 rows x 9 columns]\n","Results Table:\n","             Variable  cu  co Model  Average Costs  \\\n","0    CA_1_FOODS_3_080   9   1   SAA      12.428571   \n","1    CA_1_FOODS_3_080   9   1   RFW      12.142857   \n","2    CA_1_FOODS_3_080   9   1  kNNW      12.107143   \n","3    CA_1_FOODS_3_080   9   1   DTW      11.142857   \n","4    CA_1_FOODS_3_080   9   1   drf      11.321429   \n","..                ...  ..  ..   ...            ...   \n","995  WI_3_FOODS_3_714   9   1   SAA      16.678571   \n","996  WI_3_FOODS_3_714   9   1   RFW      14.607143   \n","997  WI_3_FOODS_3_714   9   1  kNNW      17.892857   \n","998  WI_3_FOODS_3_714   9   1   DTW      16.500000   \n","999  WI_3_FOODS_3_714   9   1   drf      15.125933   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 16, '...  0.022989   \n","2                                  {'n_neighbors': 64}  0.025862   \n","3             {'max_depth': 4, 'min_samples_split': 2}  0.103448   \n","4              {'min_node_size': 25, 'num_trees': 250}   0.08908   \n","..                                                 ...       ...   \n","995                                                N/A       N/A   \n","996  {'max_depth': None, 'min_samples_split': 32, '...  0.124197   \n","997                                {'n_neighbors': 64} -0.072805   \n","998          {'max_depth': 4, 'min_samples_split': 64}  0.010707   \n","999             {'min_node_size': 50, 'num_trees': 50}  0.093092   \n","\n","                  features   sl  \n","0                Calendric  0.9  \n","1                Calendric  0.9  \n","2                Calendric  0.9  \n","3                Calendric  0.9  \n","4                Calendric  0.9  \n","..                     ...  ...  \n","995  calendric_lag_special  0.9  \n","996  calendric_lag_special  0.9  \n","997  calendric_lag_special  0.9  \n","998  calendric_lag_special  0.9  \n","999  calendric_lag_special  0.9  \n","\n","[1000 rows x 9 columns]\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","import pickle\n","\n","M5_Feature_variation = result_table_M5\n","\n","with open('/content/gdrive/My Drive/results/M5_results_feature_variation', 'wb') as f:\n","    pickle.dump(M5_Feature_variation, f)\n","\n","\n","\n","with open('/content/gdrive/My Drive/results/M5_results_feature_variation', 'rb') as f:\n","    M5_fv = pickle.load(f)\n","with open('/content/gdrive/My Drive/results/m5_results_calendric_lag_sl (0.9, 0.75, 0.5)', 'rb') as f:\n","    M5_sl = pickle.load(f)\n","\n","\n","M5_result_all = pd.concat([M5_fv, M5_sl], ignore_index=True)\n","\n","with open('/content/gdrive/My Drive/results/M5_result_all', 'wb') as f:\n","    pickle.dump(M5_result_all, f)\n","print(\"save finished\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"761BJmwAbDEQ","executionInfo":{"status":"ok","timestamp":1696066650872,"user_tz":-120,"elapsed":2493,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"de338558-42bc-4f2c-f9f0-b484161afcb9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","save finished\n"]}]},{"cell_type":"markdown","source":["#SID"],"metadata":{"id":"WSACUbcikqH1"}},{"cell_type":"code","source":["#https://www.googleapis.com/drive/v3/files/1ZJGyI4OgTiPzo1ZMWhAIDjYSn0V590O9?alt=media&key=AIzaSyBcmx00DM0BiQLoIWcJTqZMexoKY402Vmo\n","import gdown\n","url = \"https://www.googleapis.com/drive/v3/files/1ZJGyI4OgTiPzo1ZMWhAIDjYSn0V590O9?alt=media&key=AIzaSyBcmx00DM0BiQLoIWcJTqZMexoKY402Vmo\"\n","output = 'SID'\n","gdown.download(url, output, quiet=False)\n","with open('SID', 'r') as file:\n","    data = file.read()\n","data = pd.read_csv('SID')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BZsrLQfAkuJE","executionInfo":{"status":"ok","timestamp":1696068806898,"user_tz":-120,"elapsed":29494,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"edce2538-48cc-4a75-fd38-d4addb3b8690"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://www.googleapis.com/drive/v3/files/1ZJGyI4OgTiPzo1ZMWhAIDjYSn0V590O9?alt=media&key=AIzaSyBcmx00DM0BiQLoIWcJTqZMexoKY402Vmo\n","To: /content/SID\n","654MB [00:12, 51.8MB/s]\n"]}]},{"cell_type":"code","source":["df = pd.DataFrame(data)\n","\n","#y\n","\n","y = df.pivot_table(index=['dayIndex', 'label'], columns='id', values='demand').reset_index().set_index('dayIndex')\n","y_train = y[y['label'] == 'train'].drop(columns=['label'])\n","y_test = y[y['label'] == 'test'].drop(columns=['label'])\n","\n","\n","\n","\n","# X Features\n","\n","X_train_features = data[data['label'] == 'train'].groupby('id')\n","X_test_features = data[data['label'] == 'test'].groupby('id')\n","\n","calendric_features = ['weekday_FRI', 'weekday_MON', 'weekday_SAT', 'weekday_SUN', 'weekday_THU', 'weekday_TUE', 'weekday_WED', 'month_APR', 'month_AUF', 'month_DEC', 'month_FEB', 'month_JAN', 'month_JUL', 'month_JUN', 'month_MAR', 'month_MAY', 'month_NOC', 'month_OCT', 'month_SEP', 'year_2013.0', 'year_2014.0', 'year_2015.0', 'year_2016.0', 'year_2017.0']\n","\n","lag_features = [\"demand__sum_values_7\", \"demand__median_7\", \"demand__mean_7\", \"demand__standard_deviation_7\", \"demand__variance_7\", \"demand__root_mean_square_7\", \"demand__maximum_7\", \"demand__absolute_maximum_7\", \"demand__minimum_7\", \"demand__sum_values_14\", \"demand__median_14\", \"demand__mean_14\", \"demand__standard_deviation_14\", \"demand__variance_14\", \"demand__root_mean_square_14\", \"demand__maximum_14\", \"demand__absolute_maximum_14\", \"demand__minimum_14\", \"demand__sum_values_28\", \"demand__median_28\", \"demand__mean_28\", \"demand__standard_deviation_28\", \"demand__variance_28\", \"demand__root_mean_square_28\", \"demand__maximum_28\", \"demand__absolute_maximum_28\", \"demand__minimum_28\"]\n","\n","\n","calendric_features = calendric_features                                                   # calendric\n","calendric_lag_features = calendric_features + lag_features                                # calendric und lag\n"],"metadata":{"id":"4p-m9jeWk1mn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Ignorieren von Warnungen\n","warnings.filterwarnings(\"ignore\", category=FutureWarning)\n","random.seed(0)\n","from IPython.core.display import display, HTML\n","display(HTML(\"<style>.container { width:100% !important; }</style>\"))\n","param_combinations = [\n","    {'min_node_size': 10, 'num_trees': 50},\n","    {'min_node_size': 10, 'num_trees': 100},\n","    {'min_node_size': 10, 'num_trees': 250},\n","    {'min_node_size': 10, 'num_trees': 500},\n","    {'min_node_size': 10, 'num_trees': 1000},\n","    {'min_node_size': 15, 'num_trees': 50},\n","    {'min_node_size': 15, 'num_trees': 100},\n","    {'min_node_size': 15, 'num_trees': 250},\n","    {'min_node_size': 15, 'num_trees': 500},\n","    {'min_node_size': 15, 'num_trees': 1000},\n","    {'min_node_size': 25, 'num_trees': 50},\n","    {'min_node_size': 25, 'num_trees': 100},\n","    {'min_node_size': 25, 'num_trees': 250},\n","    {'min_node_size': 25, 'num_trees': 500},\n","    {'min_node_size': 25, 'num_trees': 1000},\n","    {'min_node_size': 50, 'num_trees': 50},\n","    {'min_node_size': 50, 'num_trees': 100},\n","    {'min_node_size': 50, 'num_trees': 250},\n","    {'min_node_size': 50, 'num_trees': 500},\n","    {'min_node_size': 50, 'num_trees': 1000},\n","]\n","\n","feature_names = ['Calendric']\n","scaling_value_group = data.groupby('id', as_index=False)['scalingValue'].first()\n","\n","# Listen der zu testenden Werte für cu und co\n","combinations = [(9, 1), (7.5, 2.5), (5, 5), (2.5, 7.5), (1, 9)]\n","\n","table_rows = []  # Liste für die Tabellenzeilen\n","best_params_per_variable = {}\n","table_data_drf = []\n","\n","\n","#X_train_cal = X_train.get_group([column])[calendric_features]\n","#X_train_cal_lag = X_train.get_group([column])[calendric_lag_features]\n","#X_train_cal_lag_spec = X_train.get_group([column])[calendric_lag_special_features]\n","\n","#X_test_cal = X_test.get_group([column])[calendric_features]\n","#X_test_cal_lag = X_test.get_group([column])[calendric_lag_features]\n","#X_test_cal_lag_spec = X_test.get_group([column])[calendric_lag_special_features]\n","\n","#X_variation_pairs = [(X_train_cal, X_test_cal), (X_train_cal_lag_spec, X_test_cal_lag_spec)]\n","\n","# Schleife für alle Service Level\n","for cu, co in combinations:\n","    print(f\"Testing cu = {cu}, co = {co}\")\n","\n","    # Schleife für Calender+Lag Features über alle Service Level\n","    for column in y_train.columns:\n","        print(f\"Working on column: {column}\")\n","        X_train_cal_lag = X_train_features.get_group(column)[calendric_lag_features]\n","        X_test_cal_lag = X_test_features.get_group(column)[calendric_lag_features]\n","\n","        scaling_factor = scaling_value_group[scaling_value_group['id'] == column ]['scalingValue'].values[0]\n","\n","        # SAA\n","        SAA = SampleAverageApproximationNewsvendor(cu, co)\n","        SAA.fit(X_train_cal_lag, y_train[column])\n","        saa_pred = SampleAverageApproximationNewsvendor(cu,co).fit(y_train[column]).predict(X_test_cal_lag.shape[0])\n","        costs_SAA = average_costs(y_test[column] * scaling_factor, saa_pred * scaling_factor, co=co, cu=cu)\n","\n","        # Random Forest Grid Search und Kosten\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, cu=cu, co=co)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64],\n","            'n_estimators': [10, 20, 50, 100]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=rfw_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_RF = grid_search.best_params_\n","\n","        rfw_model = RandomForestWeightedNewsvendor(random_state=1, **best_params_RF, cu=cu, co=co)\n","        rfw_model.fit(X_train_cal_lag, y_train[column])\n","        rfw_predictions = rfw_model.predict(X_test_cal_lag)\n","        rfw_score = average_costs(y_test[column] * scaling_factor, rfw_predictions * scaling_factor, co=co, cu=cu)\n","\n","        # kNNW\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co)\n","        param_grid = {\n","            'n_neighbors': [1, 2, 4, 8, 16, 64, 128],\n","        }\n","\n","        grid_search = GridSearchCV(estimator=kNNW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_kNNW = grid_search.best_params_\n","\n","        kNNW_model = KNeighborsWeightedNewsvendor(cu=cu, co=co, **best_params_kNNW)\n","        kNNW_model.fit(X_train_cal_lag, y_train[column])\n","        knWW_predict = kNNW_model.predict(X_test_cal_lag)\n","        kNNW_score = average_costs(y_test[column] * scaling_factor, knWW_predict * scaling_factor, co=co, cu=cu)\n","\n","        # Weighted DT\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1)\n","        param_grid = {\n","            'max_depth': [None, 2, 4, 6, 8, 10],\n","            'min_samples_split': [2, 4, 6, 8, 16, 32, 64]\n","        }\n","\n","        grid_search = GridSearchCV(estimator=DTW_model, param_grid=param_grid, cv=10, n_jobs=-1)\n","        grid_search.fit(X_train_cal_lag, y_train[column])\n","        best_params_DTW = grid_search.best_params_\n","\n","        DTW_model = DecisionTreeWeightedNewsvendor(cu=cu, co=co, criterion='squared_error', random_state=1, **best_params_DTW)\n","        DTW_model.fit(X_train_cal_lag, y_train[column])\n","        DTW_prediction = DTW_model.predict(X_test_cal_lag)\n","        DTW_score = average_costs(y_test[column] * scaling_factor, DTW_prediction * scaling_factor, co=co, cu=cu)\n","\n","        #drf Hpyerparameter finden\n","        best_average_costs = float('inf')\n","        best_params_drf = None\n","\n","         # Schleife über alle Parameterkombinationen\n","        for param_combination in param_combinations:\n","            min_node_size = param_combination['min_node_size']\n","            num_trees = param_combination['num_trees']\n","\n","            # Trainieren des Modells mit den aktuellen Parametern\n","            DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","            target = y_train[column]\n","            DRF.fit(X_train_cal_lag, target)\n","            out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","            gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","            # Schleife über alle Testpunkte\n","            for i in range(len(y_test)):\n","                quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                prediction = quantil_90[i]\n","\n","                nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage > prediction:\n","                    unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                else:\n","                    unterdeckungskosten = 0\n","\n","                # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                if nachfrage < prediction:\n","                    überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                else:\n","                    überdeckungskosten = 0\n","\n","                # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                gesamtkosten_summe += gesamtkosten\n","\n","\n","            # Berechnung der Durchschnittskosten je Zielvariable und Hinzufügen zur Liste\n","            durchschnittskosten_variable = gesamtkosten_summe / len(y_test)\n","\n","            # Wenn die aktuellen Durchschnittskosten besser sind, aktualisieren Sie die besten Kosten und Parameter\n","            if durchschnittskosten_variable < best_average_costs:\n","                best_average_costs = durchschnittskosten_variable\n","                best_params_drf = param_combination\n","        table_data_drf.append([column, cu, co, \"drf\", best_average_costs, best_params_drf])\n","        best_params_per_variable[column] = best_params_drf\n","\n","        for variable, best_params_drf in best_params_per_variable.items():\n","                min_node_size = best_params_drf['min_node_size']\n","                num_trees = best_params_drf['num_trees']\n","\n","                # Trainieren des Modells mit den besten Parametern auf dem gesamten Datensatz\n","                DRF = drf(min_node_size=min_node_size, num_trees=num_trees, splitting_rule=\"FourierMMD\", seed=42)\n","                target = y_train[column]  # Verwenden Sie den gesamten Datensatz für das Training\n","                DRF.fit(X_train_cal_lag, y_train[column])\n","                out = DRF.predict(newdata=X_test_cal_lag, functional=\"quantile\", quantiles=[1-cu/(cu+co), cu/(cu+co)])\n","\n","                gesamtkosten_summe = 0  # Summe der Gesamtkosten für die aktuelle Zielvariable\n","\n","                # Schleife über alle Testpunkte\n","                for i in range(len(y_test)):\n","                    quantile = (out.quantile[:, 0, :])            # Quantilprognosen aus dem DRF\n","                    quantil_90 = [item[1] for item in quantile]  # Optimalwert je Testpunkt für das 90% Quantil\n","                    prediction = quantil_90[i]\n","\n","                    nachfrage = y_test[column].values[i]  # Tatsächliche Nachfrage für Testpunkt\n","\n","                    # Berechnung der Unterdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage > prediction:\n","                        unterdeckungskosten = (nachfrage - prediction) * cu       # unmathced demand\n","                    else:\n","                        unterdeckungskosten = 0\n","\n","                    # Berechnung der Überdeckungskosten für Testpunkt i für die aktuelle Zielvariable\n","                    if nachfrage < prediction:\n","                        überdeckungskosten = (prediction - nachfrage) * co        # überbestand\n","                    else:\n","                        überdeckungskosten = 0\n","\n","                    # Berechnung der Gesamtkosten für Testpunkt i für die aktuelle Zielvariable\n","                    gesamtkosten = unterdeckungskosten + überdeckungskosten\n","                    gesamtkosten_summe += gesamtkosten\n","\n","                durchschnittskosten_variable = (gesamtkosten_summe / len(y_test)) * scaling_factor\n","\n","                delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","                # Füge die Ergebnisse und besten Hyperparameter der aktuellen Spalte zur Tabelle hinzu\n","\n","        delta_RFW     = 1-(rfw_score/costs_SAA)\n","        delta_kNNW    = 1-(kNNW_score/costs_SAA)\n","        delta_DTW     = 1-(DTW_score/costs_SAA)\n","        delta_drf     = 1-(durchschnittskosten_variable/costs_SAA)\n","\n","        table_rows.append([column, cu, co, 'SAA', costs_SAA, \"N/A\", \"N/A\", \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'RFW', rfw_score, best_params_RF,delta_RFW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'kNNW', kNNW_score, best_params_kNNW, delta_kNNW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, 'DTW', DTW_score, best_params_DTW, delta_DTW, \"calendric,lag\", cu/(cu+co)])\n","        table_rows.append([column, cu, co, \"drf\", durchschnittskosten_variable, best_params_drf, delta_drf, \"calendric,lag\", cu/(cu+co)])\n","        result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","        print(result_table)\n","\n","\n","# Erstelle die Ergebnis-Tabelle\n","result_table = pd.DataFrame(table_rows, columns=['Variable', 'cu', 'co', 'Model', 'Average Costs', 'Best Params', \"delta C\", \"features\", \"sl\"])\n","\n","# Drucke die Ergebnis-Tabelle\n","print(\"Results Table:\")\n","print(result_table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Um3VF--Fk4k_","executionInfo":{"status":"error","timestamp":1696090210173,"user_tz":-120,"elapsed":6579041,"user":{"displayName":"Hakan Gümüsoglu","userId":"12548787717579872649"}},"outputId":"b0e837c3-de6d-4f28-d5bf-f2349792cd81"},"execution_count":null,"outputs":[{"data":{"text/html":["<style>.container { width:100% !important; }</style>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43mDie letzten 5000 Zeilen der Streamingausgabe wurden abgeschnitten.\u001b[0m\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","    Variable  cu  co Model  Average Costs  \\\n","0    1.0_1.0   9   1   SAA      12.763736   \n","1    1.0_1.0   9   1   RFW       9.813187   \n","2    1.0_1.0   9   1  kNNW       9.274725   \n","3    1.0_1.0   9   1   DTW       8.675824   \n","4    1.0_1.0   9   1   drf       9.088422   \n","..       ...  ..  ..   ...            ...   \n","665  2.0_4.0   9   1   SAA      18.467033   \n","666  2.0_4.0   9   1   RFW      13.686813   \n","667  2.0_4.0   9   1  kNNW      13.615385   \n","668  2.0_4.0   9   1   DTW      13.401099   \n","669  2.0_4.0   9   1   drf      13.007294   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","665                                                N/A       N/A   \n","666  {'max_depth': 10, 'min_samples_split': 16, 'n_...  0.258852   \n","667                                {'n_neighbors': 64}  0.262719   \n","668          {'max_depth': 4, 'min_samples_split': 64}  0.274323   \n","669            {'min_node_size': 10, 'num_trees': 100}  0.295648   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","665  calendric,lag  0.9  \n","666  calendric,lag  0.9  \n","667  calendric,lag  0.9  \n","668  calendric,lag  0.9  \n","669  calendric,lag  0.9  \n","\n","[670 rows x 9 columns]\n","Working on column: 2.0_40.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","670  2.0_40.0   9   1   SAA      24.489011   \n","671  2.0_40.0   9   1   RFW      16.467033   \n","672  2.0_40.0   9   1  kNNW      15.917582   \n","673  2.0_40.0   9   1   DTW      15.675824   \n","674  2.0_40.0   9   1   drf      14.953231   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","670                                                N/A       N/A   \n","671  {'max_depth': 10, 'min_samples_split': 16, 'n_...  0.327575   \n","672                                {'n_neighbors': 16}  0.350011   \n","673          {'max_depth': 6, 'min_samples_split': 64}  0.359883   \n","674             {'min_node_size': 10, 'num_trees': 50}   0.38939   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","670  calendric,lag  0.9  \n","671  calendric,lag  0.9  \n","672  calendric,lag  0.9  \n","673  calendric,lag  0.9  \n","674  calendric,lag  0.9  \n","\n","[675 rows x 9 columns]\n","Working on column: 2.0_41.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","675  2.0_41.0   9   1   SAA      19.593407   \n","676  2.0_41.0   9   1   RFW      12.164835   \n","677  2.0_41.0   9   1  kNNW      12.576923   \n","678  2.0_41.0   9   1   DTW      13.170330   \n","679  2.0_41.0   9   1   drf      11.341053   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","675                                                N/A       N/A   \n","676  {'max_depth': None, 'min_samples_split': 8, 'n...  0.379136   \n","677                                {'n_neighbors': 16}  0.358104   \n","678          {'max_depth': 4, 'min_samples_split': 32}  0.327818   \n","679            {'min_node_size': 10, 'num_trees': 250}   0.42118   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","675  calendric,lag  0.9  \n","676  calendric,lag  0.9  \n","677  calendric,lag  0.9  \n","678  calendric,lag  0.9  \n","679  calendric,lag  0.9  \n","\n","[680 rows x 9 columns]\n","Working on column: 2.0_42.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","680  2.0_42.0   9   1   SAA      27.620879   \n","681  2.0_42.0   9   1   RFW      19.560440   \n","682  2.0_42.0   9   1  kNNW      16.736264   \n","683  2.0_42.0   9   1   DTW      17.401099   \n","684  2.0_42.0   9   1   drf      16.785613   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","680                                                N/A       N/A   \n","681  {'max_depth': None, 'min_samples_split': 16, '...  0.291824   \n","682                                {'n_neighbors': 16}  0.394072   \n","683          {'max_depth': 8, 'min_samples_split': 64}  0.370002   \n","684            {'min_node_size': 10, 'num_trees': 100}  0.392285   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","680  calendric,lag  0.9  \n","681  calendric,lag  0.9  \n","682  calendric,lag  0.9  \n","683  calendric,lag  0.9  \n","684  calendric,lag  0.9  \n","\n","[685 rows x 9 columns]\n","Working on column: 2.0_43.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","685  2.0_43.0   9   1   SAA      37.714286   \n","686  2.0_43.0   9   1   RFW      23.120879   \n","687  2.0_43.0   9   1  kNNW      22.774725   \n","688  2.0_43.0   9   1   DTW      19.456044   \n","689  2.0_43.0   9   1   drf      18.370125   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","685                                                N/A       N/A   \n","686  {'max_depth': None, 'min_samples_split': 8, 'n...  0.386946   \n","687                                {'n_neighbors': 16}  0.396125   \n","688          {'max_depth': 8, 'min_samples_split': 64}   0.48412   \n","689            {'min_node_size': 10, 'num_trees': 250}  0.512913   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","685  calendric,lag  0.9  \n","686  calendric,lag  0.9  \n","687  calendric,lag  0.9  \n","688  calendric,lag  0.9  \n","689  calendric,lag  0.9  \n","\n","[690 rows x 9 columns]\n","Working on column: 2.0_44.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","690  2.0_44.0   9   1   SAA      23.939560   \n","691  2.0_44.0   9   1   RFW      16.214286   \n","692  2.0_44.0   9   1  kNNW      15.642857   \n","693  2.0_44.0   9   1   DTW      17.005495   \n","694  2.0_44.0   9   1   drf      15.394934   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","690                                                N/A       N/A   \n","691  {'max_depth': None, 'min_samples_split': 8, 'n...  0.322699   \n","692                                {'n_neighbors': 16}  0.346569   \n","693          {'max_depth': 6, 'min_samples_split': 64}  0.289649   \n","694             {'min_node_size': 10, 'num_trees': 50}  0.356925   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","690  calendric,lag  0.9  \n","691  calendric,lag  0.9  \n","692  calendric,lag  0.9  \n","693  calendric,lag  0.9  \n","694  calendric,lag  0.9  \n","\n","[695 rows x 9 columns]\n","Working on column: 2.0_45.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","695  2.0_45.0   9   1   SAA      57.373626   \n","696  2.0_45.0   9   1   RFW      34.846154   \n","697  2.0_45.0   9   1  kNNW      29.340659   \n","698  2.0_45.0   9   1   DTW      25.181319   \n","699  2.0_45.0   9   1   drf      25.847710   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","695                                                N/A       N/A   \n","696  {'max_depth': 10, 'min_samples_split': 6, 'n_e...  0.392645   \n","697                                {'n_neighbors': 16}  0.488604   \n","698          {'max_depth': 8, 'min_samples_split': 64}  0.561099   \n","699             {'min_node_size': 15, 'num_trees': 50}  0.549484   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","695  calendric,lag  0.9  \n","696  calendric,lag  0.9  \n","697  calendric,lag  0.9  \n","698  calendric,lag  0.9  \n","699  calendric,lag  0.9  \n","\n","[700 rows x 9 columns]\n","Working on column: 2.0_46.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","700  2.0_46.0   9   1   SAA      45.967033   \n","701  2.0_46.0   9   1   RFW      24.384615   \n","702  2.0_46.0   9   1  kNNW      23.164835   \n","703  2.0_46.0   9   1   DTW      24.593407   \n","704  2.0_46.0   9   1   drf      20.450032   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","700                                                N/A       N/A   \n","701  {'max_depth': None, 'min_samples_split': 16, '...  0.469519   \n","702                                {'n_neighbors': 16}  0.496055   \n","703          {'max_depth': 8, 'min_samples_split': 64}  0.464977   \n","704           {'min_node_size': 10, 'num_trees': 1000}  0.555115   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","700  calendric,lag  0.9  \n","701  calendric,lag  0.9  \n","702  calendric,lag  0.9  \n","703  calendric,lag  0.9  \n","704  calendric,lag  0.9  \n","\n","[705 rows x 9 columns]\n","Working on column: 2.0_47.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","705  2.0_47.0   9   1   SAA      16.263736   \n","706  2.0_47.0   9   1   RFW      12.318681   \n","707  2.0_47.0   9   1  kNNW      11.384615   \n","708  2.0_47.0   9   1   DTW      10.895604   \n","709  2.0_47.0   9   1   drf      10.993966   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","705                                                N/A       N/A   \n","706  {'max_depth': 10, 'min_samples_split': 16, 'n_...  0.242568   \n","707                                {'n_neighbors': 64}       0.3   \n","708          {'max_depth': 6, 'min_samples_split': 64}  0.330068   \n","709            {'min_node_size': 15, 'num_trees': 100}   0.32402   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","705  calendric,lag  0.9  \n","706  calendric,lag  0.9  \n","707  calendric,lag  0.9  \n","708  calendric,lag  0.9  \n","709  calendric,lag  0.9  \n","\n","[710 rows x 9 columns]\n","Working on column: 2.0_48.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","710  2.0_48.0   9   1   SAA      37.725275   \n","711  2.0_48.0   9   1   RFW      22.923077   \n","712  2.0_48.0   9   1  kNNW      19.956044   \n","713  2.0_48.0   9   1   DTW      22.758242   \n","714  2.0_48.0   9   1   drf      18.577710   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","710                                                N/A       N/A   \n","711  {'max_depth': None, 'min_samples_split': 6, 'n...  0.392368   \n","712                                {'n_neighbors': 16}  0.471017   \n","713          {'max_depth': 6, 'min_samples_split': 64}  0.396738   \n","714            {'min_node_size': 10, 'num_trees': 100}  0.507553   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","710  calendric,lag  0.9  \n","711  calendric,lag  0.9  \n","712  calendric,lag  0.9  \n","713  calendric,lag  0.9  \n","714  calendric,lag  0.9  \n","\n","[715 rows x 9 columns]\n","Working on column: 2.0_49.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","715  2.0_49.0   9   1   SAA      21.412088   \n","716  2.0_49.0   9   1   RFW      15.065934   \n","717  2.0_49.0   9   1  kNNW      13.456044   \n","718  2.0_49.0   9   1   DTW      12.758242   \n","719  2.0_49.0   9   1   drf      13.174049   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","715                                                N/A       N/A   \n","716  {'max_depth': 10, 'min_samples_split': 32, 'n_...  0.296382   \n","717                                {'n_neighbors': 16}  0.371568   \n","718          {'max_depth': 6, 'min_samples_split': 64}  0.404157   \n","719            {'min_node_size': 10, 'num_trees': 500}  0.384738   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","715  calendric,lag  0.9  \n","716  calendric,lag  0.9  \n","717  calendric,lag  0.9  \n","718  calendric,lag  0.9  \n","719  calendric,lag  0.9  \n","\n","[720 rows x 9 columns]\n","Working on column: 2.0_5.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","    Variable  cu  co Model  Average Costs  \\\n","0    1.0_1.0   9   1   SAA      12.763736   \n","1    1.0_1.0   9   1   RFW       9.813187   \n","2    1.0_1.0   9   1  kNNW       9.274725   \n","3    1.0_1.0   9   1   DTW       8.675824   \n","4    1.0_1.0   9   1   drf       9.088422   \n","..       ...  ..  ..   ...            ...   \n","720  2.0_5.0   9   1   SAA      17.796703   \n","721  2.0_5.0   9   1   RFW      12.703297   \n","722  2.0_5.0   9   1  kNNW      12.164835   \n","723  2.0_5.0   9   1   DTW      11.813187   \n","724  2.0_5.0   9   1   drf      11.491360   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","720                                                N/A       N/A   \n","721  {'max_depth': None, 'min_samples_split': 32, '...  0.286199   \n","722                                {'n_neighbors': 64}  0.316456   \n","723          {'max_depth': 4, 'min_samples_split': 32}  0.336215   \n","724             {'min_node_size': 15, 'num_trees': 50}  0.354298   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","720  calendric,lag  0.9  \n","721  calendric,lag  0.9  \n","722  calendric,lag  0.9  \n","723  calendric,lag  0.9  \n","724  calendric,lag  0.9  \n","\n","[725 rows x 9 columns]\n","Working on column: 2.0_50.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","725  2.0_50.0   9   1   SAA      47.686813   \n","726  2.0_50.0   9   1   RFW      28.637363   \n","727  2.0_50.0   9   1  kNNW      26.445055   \n","728  2.0_50.0   9   1   DTW      25.802198   \n","729  2.0_50.0   9   1   drf      23.942432   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","725                                                N/A       N/A   \n","726  {'max_depth': None, 'min_samples_split': 16, '...   0.39947   \n","727                                {'n_neighbors': 16}  0.445443   \n","728          {'max_depth': 8, 'min_samples_split': 64}  0.458924   \n","729            {'min_node_size': 10, 'num_trees': 100}  0.497923   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","725  calendric,lag  0.9  \n","726  calendric,lag  0.9  \n","727  calendric,lag  0.9  \n","728  calendric,lag  0.9  \n","729  calendric,lag  0.9  \n","\n","[730 rows x 9 columns]\n","Working on column: 2.0_6.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","    Variable  cu  co Model  Average Costs  \\\n","0    1.0_1.0   9   1   SAA      12.763736   \n","1    1.0_1.0   9   1   RFW       9.813187   \n","2    1.0_1.0   9   1  kNNW       9.274725   \n","3    1.0_1.0   9   1   DTW       8.675824   \n","4    1.0_1.0   9   1   drf       9.088422   \n","..       ...  ..  ..   ...            ...   \n","730  2.0_6.0   9   1   SAA      37.192308   \n","731  2.0_6.0   9   1   RFW      27.274725   \n","732  2.0_6.0   9   1  kNNW      24.456044   \n","733  2.0_6.0   9   1   DTW      24.060440   \n","734  2.0_6.0   9   1   drf      20.454894   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","730                                                N/A       N/A   \n","731  {'max_depth': None, 'min_samples_split': 6, 'n...  0.266657   \n","732                                {'n_neighbors': 16}  0.342443   \n","733          {'max_depth': 6, 'min_samples_split': 64}   0.35308   \n","734            {'min_node_size': 10, 'num_trees': 500}  0.450024   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","730  calendric,lag  0.9  \n","731  calendric,lag  0.9  \n","732  calendric,lag  0.9  \n","733  calendric,lag  0.9  \n","734  calendric,lag  0.9  \n","\n","[735 rows x 9 columns]\n","Working on column: 2.0_7.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","    Variable  cu  co Model  Average Costs  \\\n","0    1.0_1.0   9   1   SAA      12.763736   \n","1    1.0_1.0   9   1   RFW       9.813187   \n","2    1.0_1.0   9   1  kNNW       9.274725   \n","3    1.0_1.0   9   1   DTW       8.675824   \n","4    1.0_1.0   9   1   drf       9.088422   \n","..       ...  ..  ..   ...            ...   \n","735  2.0_7.0   9   1   SAA      44.027473   \n","736  2.0_7.0   9   1   RFW      26.225275   \n","737  2.0_7.0   9   1  kNNW      23.956044   \n","738  2.0_7.0   9   1   DTW      22.791209   \n","739  2.0_7.0   9   1   drf      22.279160   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","735                                                N/A       N/A   \n","736  {'max_depth': None, 'min_samples_split': 16, '...  0.404343   \n","737                                {'n_neighbors': 16}  0.455884   \n","738          {'max_depth': 6, 'min_samples_split': 64}  0.482341   \n","739           {'min_node_size': 10, 'num_trees': 1000}  0.493971   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","735  calendric,lag  0.9  \n","736  calendric,lag  0.9  \n","737  calendric,lag  0.9  \n","738  calendric,lag  0.9  \n","739  calendric,lag  0.9  \n","\n","[740 rows x 9 columns]\n","Working on column: 2.0_8.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","    Variable  cu  co Model  Average Costs  \\\n","0    1.0_1.0   9   1   SAA      12.763736   \n","1    1.0_1.0   9   1   RFW       9.813187   \n","2    1.0_1.0   9   1  kNNW       9.274725   \n","3    1.0_1.0   9   1   DTW       8.675824   \n","4    1.0_1.0   9   1   drf       9.088422   \n","..       ...  ..  ..   ...            ...   \n","740  2.0_8.0   9   1   SAA      51.648352   \n","741  2.0_8.0   9   1   RFW      30.016484   \n","742  2.0_8.0   9   1  kNNW      28.192308   \n","743  2.0_8.0   9   1   DTW      29.225275   \n","744  2.0_8.0   9   1   drf      23.053557   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","740                                                N/A       N/A   \n","741  {'max_depth': None, 'min_samples_split': 16, '...   0.41883   \n","742                                 {'n_neighbors': 8}  0.454149   \n","743          {'max_depth': 8, 'min_samples_split': 64}  0.434149   \n","744            {'min_node_size': 10, 'num_trees': 100}  0.553644   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","740  calendric,lag  0.9  \n","741  calendric,lag  0.9  \n","742  calendric,lag  0.9  \n","743  calendric,lag  0.9  \n","744  calendric,lag  0.9  \n","\n","[745 rows x 9 columns]\n","Working on column: 2.0_9.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","    Variable  cu  co Model  Average Costs  \\\n","0    1.0_1.0   9   1   SAA      12.763736   \n","1    1.0_1.0   9   1   RFW       9.813187   \n","2    1.0_1.0   9   1  kNNW       9.274725   \n","3    1.0_1.0   9   1   DTW       8.675824   \n","4    1.0_1.0   9   1   drf       9.088422   \n","..       ...  ..  ..   ...            ...   \n","745  2.0_9.0   9   1   SAA      37.681319   \n","746  2.0_9.0   9   1   RFW      22.423077   \n","747  2.0_9.0   9   1  kNNW      21.071429   \n","748  2.0_9.0   9   1   DTW      19.186813   \n","749  2.0_9.0   9   1   drf      17.647336   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","745                                                N/A       N/A   \n","746  {'max_depth': None, 'min_samples_split': 16, '...  0.404929   \n","747                                {'n_neighbors': 16}  0.440799   \n","748          {'max_depth': 6, 'min_samples_split': 64}  0.490814   \n","749             {'min_node_size': 10, 'num_trees': 50}  0.531669   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","745  calendric,lag  0.9  \n","746  calendric,lag  0.9  \n","747  calendric,lag  0.9  \n","748  calendric,lag  0.9  \n","749  calendric,lag  0.9  \n","\n","[750 rows x 9 columns]\n","Working on column: 3.0_1.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","    Variable  cu  co Model  Average Costs  \\\n","0    1.0_1.0   9   1   SAA      12.763736   \n","1    1.0_1.0   9   1   RFW       9.813187   \n","2    1.0_1.0   9   1  kNNW       9.274725   \n","3    1.0_1.0   9   1   DTW       8.675824   \n","4    1.0_1.0   9   1   drf       9.088422   \n","..       ...  ..  ..   ...            ...   \n","750  3.0_1.0   9   1   SAA      16.131868   \n","751  3.0_1.0   9   1   RFW      11.780220   \n","752  3.0_1.0   9   1  kNNW      11.505495   \n","753  3.0_1.0   9   1   DTW      12.285714   \n","754  3.0_1.0   9   1   drf      11.188073   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","750                                                N/A       N/A   \n","751  {'max_depth': 8, 'min_samples_split': 16, 'n_e...  0.269755   \n","752                                {'n_neighbors': 64}  0.286785   \n","753          {'max_depth': 6, 'min_samples_split': 64}   0.23842   \n","754           {'min_node_size': 10, 'num_trees': 1000}  0.306461   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","750  calendric,lag  0.9  \n","751  calendric,lag  0.9  \n","752  calendric,lag  0.9  \n","753  calendric,lag  0.9  \n","754  calendric,lag  0.9  \n","\n","[755 rows x 9 columns]\n","Working on column: 3.0_10.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","755  3.0_10.0   9   1   SAA      43.439560   \n","756  3.0_10.0   9   1   RFW      27.708791   \n","757  3.0_10.0   9   1  kNNW      26.554945   \n","758  3.0_10.0   9   1   DTW      23.461538   \n","759  3.0_10.0   9   1   drf      23.167349   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","755                                                N/A       N/A   \n","756  {'max_depth': None, 'min_samples_split': 16, '...   0.36213   \n","757                                {'n_neighbors': 16}  0.388692   \n","758          {'max_depth': 8, 'min_samples_split': 64}  0.459904   \n","759             {'min_node_size': 15, 'num_trees': 50}  0.466676   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","755  calendric,lag  0.9  \n","756  calendric,lag  0.9  \n","757  calendric,lag  0.9  \n","758  calendric,lag  0.9  \n","759  calendric,lag  0.9  \n","\n","[760 rows x 9 columns]\n","Working on column: 3.0_11.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","760  3.0_11.0   9   1   SAA      46.109890   \n","761  3.0_11.0   9   1   RFW      28.549451   \n","762  3.0_11.0   9   1  kNNW      26.175824   \n","763  3.0_11.0   9   1   DTW      25.725275   \n","764  3.0_11.0   9   1   drf      25.283844   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","760                                                N/A       N/A   \n","761  {'max_depth': 10, 'min_samples_split': 4, 'n_e...  0.380839   \n","762                                {'n_neighbors': 16}  0.432316   \n","763          {'max_depth': 6, 'min_samples_split': 64}  0.442088   \n","764            {'min_node_size': 10, 'num_trees': 500}  0.451661   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","760  calendric,lag  0.9  \n","761  calendric,lag  0.9  \n","762  calendric,lag  0.9  \n","763  calendric,lag  0.9  \n","764  calendric,lag  0.9  \n","\n","[765 rows x 9 columns]\n","Working on column: 3.0_12.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","765  3.0_12.0   9   1   SAA      45.175824   \n","766  3.0_12.0   9   1   RFW      27.274725   \n","767  3.0_12.0   9   1  kNNW      25.104396   \n","768  3.0_12.0   9   1   DTW      23.835165   \n","769  3.0_12.0   9   1   drf      22.009745   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","765                                                N/A       N/A   \n","766  {'max_depth': None, 'min_samples_split': 16, '...  0.396254   \n","767                                {'n_neighbors': 16}  0.444296   \n","768          {'max_depth': 8, 'min_samples_split': 64}  0.472391   \n","769           {'min_node_size': 10, 'num_trees': 1000}  0.512798   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","765  calendric,lag  0.9  \n","766  calendric,lag  0.9  \n","767  calendric,lag  0.9  \n","768  calendric,lag  0.9  \n","769  calendric,lag  0.9  \n","\n","[770 rows x 9 columns]\n","Working on column: 3.0_13.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","770  3.0_13.0   9   1   SAA      55.846154   \n","771  3.0_13.0   9   1   RFW      30.379121   \n","772  3.0_13.0   9   1  kNNW      25.868132   \n","773  3.0_13.0   9   1   DTW      28.521978   \n","774  3.0_13.0   9   1   drf      24.623218   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","770                                                N/A       N/A   \n","771  {'max_depth': 10, 'min_samples_split': 16, 'n_...  0.456021   \n","772                                {'n_neighbors': 16}  0.536797   \n","773          {'max_depth': 6, 'min_samples_split': 64}  0.489276   \n","774             {'min_node_size': 10, 'num_trees': 50}  0.559088   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","770  calendric,lag  0.9  \n","771  calendric,lag  0.9  \n","772  calendric,lag  0.9  \n","773  calendric,lag  0.9  \n","774  calendric,lag  0.9  \n","\n","[775 rows x 9 columns]\n","Working on column: 3.0_14.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","775  3.0_14.0   9   1   SAA      37.631868   \n","776  3.0_14.0   9   1   RFW      22.390110   \n","777  3.0_14.0   9   1  kNNW      21.730769   \n","778  3.0_14.0   9   1   DTW      20.170330   \n","779  3.0_14.0   9   1   drf      19.348179   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","775                                                N/A       N/A   \n","776  {'max_depth': None, 'min_samples_split': 16, '...  0.405023   \n","777                                {'n_neighbors': 16}  0.422543   \n","778          {'max_depth': 6, 'min_samples_split': 64}  0.464009   \n","779           {'min_node_size': 10, 'num_trees': 1000}  0.485857   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","775  calendric,lag  0.9  \n","776  calendric,lag  0.9  \n","777  calendric,lag  0.9  \n","778  calendric,lag  0.9  \n","779  calendric,lag  0.9  \n","\n","[780 rows x 9 columns]\n","Working on column: 3.0_15.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","     Variable  cu  co Model  Average Costs  \\\n","0     1.0_1.0   9   1   SAA      12.763736   \n","1     1.0_1.0   9   1   RFW       9.813187   \n","2     1.0_1.0   9   1  kNNW       9.274725   \n","3     1.0_1.0   9   1   DTW       8.675824   \n","4     1.0_1.0   9   1   drf       9.088422   \n","..        ...  ..  ..   ...            ...   \n","780  3.0_15.0   9   1   SAA      55.263736   \n","781  3.0_15.0   9   1   RFW      30.868132   \n","782  3.0_15.0   9   1  kNNW      25.467033   \n","783  3.0_15.0   9   1   DTW      25.104396   \n","784  3.0_15.0   9   1   drf      25.183151   \n","\n","                                           Best Params   delta C  \\\n","0                                                  N/A       N/A   \n","1    {'max_depth': None, 'min_samples_split': 8, 'n...  0.231167   \n","2                                  {'n_neighbors': 64}  0.273353   \n","3            {'max_depth': 4, 'min_samples_split': 64}  0.320276   \n","4              {'min_node_size': 15, 'num_trees': 500}   0.28795   \n","..                                                 ...       ...   \n","780                                                N/A       N/A   \n","781  {'max_depth': None, 'min_samples_split': 8, 'n...   0.44144   \n","782                                 {'n_neighbors': 8}  0.539173   \n","783          {'max_depth': 8, 'min_samples_split': 64}  0.545735   \n","784           {'min_node_size': 10, 'num_trees': 1000}   0.54431   \n","\n","          features   sl  \n","0    calendric,lag  0.9  \n","1    calendric,lag  0.9  \n","2    calendric,lag  0.9  \n","3    calendric,lag  0.9  \n","4    calendric,lag  0.9  \n","..             ...  ...  \n","780  calendric,lag  0.9  \n","781  calendric,lag  0.9  \n","782  calendric,lag  0.9  \n","783  calendric,lag  0.9  \n","784  calendric,lag  0.9  \n","\n","[785 rows x 9 columns]\n","Working on column: 3.0_16.0\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n","[0.09999999999999998, 0.9]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/sexp.py\u001b[0m in \u001b[0;36mfrom_object\u001b[0;34m(cls, obj)\u001b[0m\n\u001b[1;32m    609\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 610\u001b[0;31m             \u001b[0mmv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmemoryview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    611\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_memoryview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: memoryview: a bytes-like object is required, not 'tuple'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-c230d897038c>\u001b[0m in \u001b[0;36m<cell line: 51>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    173\u001b[0m                 \u001b[0mDRF\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdrf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmin_node_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmin_node_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_trees\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_trees\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplitting_rule\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"FourierMMD\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m                 \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# Verwenden Sie den gesamten Datensatz für das Training\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 175\u001b[0;31m                 \u001b[0mDRF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_cal_lag\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    176\u001b[0m                 \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDRF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnewdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_test_cal_lag\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunctional\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"quantile\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mquantiles\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mcu\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mco\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcu\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mco\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/drf/code.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, Y)\u001b[0m\n\u001b[1;32m     72\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mY_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m         \u001b[0mX_r\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mro\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpy2rpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m         \u001b[0mY_r\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mro\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpy2rpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mr_fit_object\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdrf_r_package\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_r\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/functools.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    887\u001b[0m                             '1 positional argument')\n\u001b[1;32m    888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mdispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m     \u001b[0mfuncname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__name__'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'singledispatch function'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/robjects/pandas2ri.py\u001b[0m in \u001b[0;36mpy2rpy_pandasdataframe\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miteritems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m             \u001b[0mod\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpy2rpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m             warnings.warn('Error while trying to convert '\n","\u001b[0;32m/usr/lib/python3.10/functools.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    887\u001b[0m                             '1 positional argument')\n\u001b[1;32m    888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mdispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m     \u001b[0mfuncname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__name__'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'singledispatch function'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/robjects/pandas2ri.py\u001b[0m in \u001b[0;36mpy2rpy_pandasseries\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m    198\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m         res.do_slot_assign('names',\n\u001b[0;32m--> 200\u001b[0;31m                            StrVector(tuple(str(x) for x in obj.index)))\n\u001b[0m\u001b[1;32m    201\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m         res.do_slot_assign('dimnames',\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/robjects/vectors.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 385\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_add_rops\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    387\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/sexp.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    521\u001b[0m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    522\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollections\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSized\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 523\u001b[0;31m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_object\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__sexp__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    524\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    525\u001b[0m             raise TypeError('The constructor must be called '\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/sexp.py\u001b[0m in \u001b[0;36mfrom_object\u001b[0;34m(cls, obj)\u001b[0m\n\u001b[1;32m    612\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    613\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 614\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    615\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    616\u001b[0m                 msg = ('The class methods from_memoryview() and '\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/conversion.py\u001b[0m in \u001b[0;36m_\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_cdata_res_to_rinterface\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m         \u001b[0mcdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m         \u001b[0;31m# TODO: test cdata is of the expected CType\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_cdata_to_rinterface\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/sexp.py\u001b[0m in \u001b[0;36mfrom_iterable\u001b[0;34m(cls, iterable, populate_func, set_elt, cast_value)\u001b[0m\n\u001b[1;32m    550\u001b[0m                     cls._R_TYPE, n)\n\u001b[1;32m    551\u001b[0m             )\n\u001b[0;32m--> 552\u001b[0;31m             \u001b[0mpopulate_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_vector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mset_elt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcast_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    553\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mr_vector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    554\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/sexp.py\u001b[0m in \u001b[0;36m_populate_r_vector\u001b[0;34m(iterable, r_vector, set_elt, cast_value)\u001b[0m\n\u001b[1;32m    472\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_populate_r_vector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_vector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mset_elt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcast_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    473\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 474\u001b[0;31m         \u001b[0mset_elt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr_vector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcast_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/sexp.py\u001b[0m in \u001b[0;36m_as_charsxp_cdata\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    675\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__sexp__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    676\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 677\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_str_to_charsxp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    678\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/conversion.py\u001b[0m in \u001b[0;36m_str_to_charsxp\u001b[0;34m(val)\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mR_NaString\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m         \u001b[0mcchar\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_str_to_cchar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m         \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRf_mkCharCE\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcchar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopenrlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCE_UTF8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/rpy2/rinterface_lib/conversion.py\u001b[0m in \u001b[0;36m_str_to_cchar\u001b[0;34m(s, encoding)\u001b[0m\n\u001b[1;32m    119\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_str_to_cchar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m     \u001b[0;31m# TODO: use isString and installTrChar\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m     \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mffi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'char[]'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}],"metadata":{"accelerator":"TPU","colab":{"collapsed_sections":["KXGAFgfXhz5W","O_dGQlTiW_gj"],"machine_shape":"hm","provenance":[{"file_id":"1EGdwCOq2vKRGtXns2FTdfLd2arjDkF4x","timestamp":1696108492366}],"toc_visible":true,"authorship_tag":"ABX9TyPBPRCAxPRhBMllbmOjwT/A"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}